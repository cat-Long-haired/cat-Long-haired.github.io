{"title":"Redis","uid":"a978a5e93d8e6628e9f4ee713be55be8","slug":"Redis","date":"2023-04-12T09:42:37.000Z","updated":"2023-04-17T11:48:15.000Z","comments":true,"path":"api/articles/Redis.json","keywords":null,"cover":null,"content":"<h3 id=\"什么是Redis\"><a href=\"#什么是Redis\" class=\"headerlink\" title=\"什么是Redis\"></a>什么是Redis</h3><p>Redis是一个基于内存支持key-value等多种数据结构的存储系统，支持网络 可用于缓存，事件发布或订阅，高速队列等场景，支持字符串（String），哈希（Hashes），列表（Lists），队列（Sets），有序集合（Zset）等数据类型 基于内存 可持久化</p>\n<h3 id=\"为什么使用Redis\"><a href=\"#为什么使用Redis\" class=\"headerlink\" title=\"为什么使用Redis\"></a>为什么使用Redis</h3><ul>\n<li>高性能<br>Redis能读的速度是110000次&#x2F;s，写的速度是81000次&#x2F;s</li>\n<li>数据结构<br>Redis支持二进制的String，Lists，Hashes，Sets，Sorted sets数据类型操作</li>\n<li>原子性<br>Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行</li>\n<li>丰富的特性<br>Redis支持Publicsh&#x2F;subscribe，通知key过期特性</li>\n<li>持久化<br>Redis支持RDB，AOF等持久化方式</li>\n<li>发布订阅<br>Redis支持发布&#x2F;订阅模式</li>\n<li>主从复制<br>Redis</li>\n<li>分片</li>\n<li>可移植性</li>\n</ul>\n<h3 id=\"Redis数据结构\"><a href=\"#Redis数据结构\" class=\"headerlink\" title=\"Redis数据结构\"></a>Redis数据结构</h3><table>\n<thead>\n<tr>\n<th>结构类型</th>\n<th>结构存储的值</th>\n<th>结构的读写能力</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String字符串</td>\n<td>可以是字符串，整数或浮点数</td>\n<td>对整个字符串或字符串的一部分解析操作，对整数或浮点数进行自增或自减操作</td>\n</tr>\n<tr>\n<td>List列表</td>\n<td>一个链表，链表上的每个节点都包含一个字符串</td>\n<td>对链表的俩端进行push和pop操作，读取单个或多个元素，根据值查找或删除元素</td>\n</tr>\n<tr>\n<td>Set集合</td>\n<td>包含字符串的无序集合</td>\n<td>字符串的集合，包括基础的方法是否存在添加，获取，删除；还包括计算交集。并集，差集等</td>\n</tr>\n<tr>\n<td>Hash散列</td>\n<td>包含键值对的无序散列表</td>\n<td>包含方法有添加，获取，删除单个元素</td>\n</tr>\n<tr>\n<td>Zset有序集合</td>\n<td>包含字符串的有序集合</td>\n<td>字符串成员与浮点数分数之间的有序映射，元素的排列顺序由分数的大小决定，包含方法有添加，获取，删除单个元素以及根据分值范围或成员来获取元素</td>\n</tr>\n</tbody></table>\n<h5 id=\"String-字符串\"><a href=\"#String-字符串\" class=\"headerlink\" title=\"String 字符串\"></a>String 字符串</h5><p>String 字符串是redis最基本的数据类型，一个key对应一个value，一个键值对最大存储512MB</p>\n<table>\n<thead>\n<tr>\n<th>命令格式</th>\n<th>功能</th>\n<th>案列</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>set key value</td>\n<td>将key-value缓存redis中</td>\n<td>set name maomi</td>\n</tr>\n<tr>\n<td>get key</td>\n<td>从redis中获取key对应value值</td>\n<td>get name</td>\n</tr>\n<tr>\n<td>incr key</td>\n<td>将key对应的value值+1</td>\n<td>incr age</td>\n</tr>\n<tr>\n<td>decr key</td>\n<td>将key对应的value值-1</td>\n<td>decr age</td>\n</tr>\n<tr>\n<td>setex key seconds value</td>\n<td>将key-value缓存到redis中，seconds秒后失效</td>\n<td>set miao 10 man</td>\n</tr>\n<tr>\n<td>ttl key</td>\n<td>查看key存活空间</td>\n<td>ttl miao</td>\n</tr>\n<tr>\n<td>del key</td>\n<td>从redis中删除key</td>\n<td>del name</td>\n</tr>\n<tr>\n<td>setnx ket value</td>\n<td>如果key已经存，不做任何操作，如果key不存在，则直接添加</td>\n<td>setnx name xiaomaomi</td>\n</tr>\n</tbody></table>\n<h4 id=\"Hash类型\"><a href=\"#Hash类型\" class=\"headerlink\" title=\"Hash类型\"></a>Hash类型</h4><p>Hash类型是String类型的fileld和value的映射表，特别适合存储对象 ，每个哈希键值中可以存储多达40亿个字段值对</p>\n<table>\n<thead>\n<tr>\n<th>命令格式</th>\n<th>功能</th>\n<th>案列</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hset key field value</td>\n<td>将field value 对缓存到redis中hash中，键值为key</td>\n<td>hash user name maomi</td>\n</tr>\n<tr>\n<td>hget key field</td>\n<td>从key对应hash列表中获取field字段</td>\n<td>hget user name</td>\n</tr>\n<tr>\n<td>hexists key field</td>\n<td>判断key对应的hash列表是否存在field字段</td>\n<td>hexists user age</td>\n</tr>\n<tr>\n<td>hdel key field</td>\n<td>删除key对应hash列表中field字段</td>\n<td>hdel user age</td>\n</tr>\n<tr>\n<td>hincrby key field incrment</td>\n<td>给key对应hash列表中field字段+increment</td>\n<td>hincrby user age 10</td>\n</tr>\n<tr>\n<td>hlen key</td>\n<td>查看key对应的hash列表中field的数量</td>\n<td>hlen user</td>\n</tr>\n<tr>\n<td>hkeys key</td>\n<td>获取key对应的hash列表中所有的field值</td>\n<td>hkeys user</td>\n</tr>\n<tr>\n<td>hvals key</td>\n<td>获取key对应的hash列表中所有的field对应的value值</td>\n<td>kvals user</td>\n</tr>\n<tr>\n<td>hgetall key</td>\n<td>获取key对应的hash列表中所有的field及其对应的values值</td>\n<td>hgetall user</td>\n</tr>\n</tbody></table>\n<h4 id=\"List类型\"><a href=\"#List类型\" class=\"headerlink\" title=\"List类型\"></a>List类型</h4><p>List链表是按插入顺序排序的字符串列表。可以在列表的头部（左）或尾部（右）添加元素，列表可以包含超过40亿个元素</p>\n<table>\n<thead>\n<tr>\n<th>命令格式</th>\n<th>功能</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rpush key value</td>\n<td>从右边往key集合中添加value值</td>\n<td>rpush xiaomaomi baimao</td>\n</tr>\n<tr>\n<td>lrange key start stop</td>\n<td>从左边开始列表key集合，从start位置开始 stop位置结束</td>\n<td>lrarnge xiaomaomi 0 -1</td>\n</tr>\n<tr>\n<td>lpush key value</td>\n<td>从左边往key集合中添加value值</td>\n<td>lpush xiaomaomi heimao</td>\n</tr>\n<tr>\n<td>lpop key</td>\n<td>弹出key集合中最左边的数据</td>\n<td>lpop xiaomaomi</td>\n</tr>\n<tr>\n<td>rpop key</td>\n<td>弹出key集合中最右边的数据</td>\n<td>repop xiaomaomi</td>\n</tr>\n<tr>\n<td>llen key</td>\n<td>获取列表长度</td>\n<td>llen xiaomaomi</td>\n</tr>\n</tbody></table>\n<h4 id=\"Sets类型\"><a href=\"#Sets类型\" class=\"headerlink\" title=\"Sets类型\"></a>Sets类型</h4><p>Set集合是String类型的无序集合，set是通过HashTable实现的 对集合我们可以取并集，交集，差集</p>\n<table>\n<thead>\n<tr>\n<th>命令格式</th>\n<th>功能</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sadd key members[…..]</td>\n<td>往key集合中添加member元素</td>\n<td>sadd xiaomaomi buou xianluo  lihua</td>\n</tr>\n<tr>\n<td>smembers key</td>\n<td>遍历key集合中所有的元素</td>\n<td>smembers xiaomaomi</td>\n</tr>\n<tr>\n<td>srem key members[…..]</td>\n<td>删除key集合中members元素</td>\n<td>srem xiaomaomi buou</td>\n</tr>\n<tr>\n<td>spop key count</td>\n<td>从key集合中随机弹出count个元素</td>\n<td>spop xiaomaomi 1</td>\n</tr>\n</tbody></table>\n<h4 id=\"Zset类型\"><a href=\"#Zset类型\" class=\"headerlink\" title=\"Zset类型\"></a>Zset类型</h4><p>Zset集合是String类型的有序集合，有序集合的成员是唯一的，但是分数（score）允许重复</p>\n<table>\n<thead>\n<tr>\n<th>命令格式</th>\n<th>功能</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>zadd key score member</td>\n<td>往key集合中添加member元素 分数为score</td>\n<td>zadd players 100 a</td>\n</tr>\n<tr>\n<td>zincrby key increment member</td>\n<td>将key集合中的member元素 分数 + increment</td>\n<td>zadd players 100 a</td>\n</tr>\n<tr>\n<td>zrange key start stop [withscores]</td>\n<td>将key集合中的元素按分数升序排练 [显示分数]</td>\n<td>zrange players 0 -1 withscores</td>\n</tr>\n<tr>\n<td>zrevrange key start stop [withscores]</td>\n<td>将key集合中的分数降序排列 [显示分数]</td>\n<td>zrevrange players 0 -1 withscores</td>\n</tr>\n<tr>\n<td>zrank key member</td>\n<td>返回member元素在key结合中的正序排名</td>\n<td>zrank players a</td>\n</tr>\n<tr>\n<td>zrevrank key member</td>\n<td>返回member元素在key结合中的降序排名</td>\n<td>zrevrank players a</td>\n</tr>\n<tr>\n<td>zcard key</td>\n<td>返回key集合元素个数</td>\n<td>zcard players</td>\n</tr>\n</tbody></table>\n","feature":true,"text":"什么是RedisRedis是一个基于内存支持key-value等多种数据结构的存储系统，支持网络 可用于缓存，事件发布或订阅，高速队列等场景，支持字符串（String），哈希（Hashes），列表（Lists），队列（Sets），有序集合（Zset）等数据类型 基于内存 可持久化...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFRedis\"><span class=\"toc-text\">什么是Redis</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8Redis\"><span class=\"toc-text\">为什么使用Redis</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Redis数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#String-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">String 字符串</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Hash%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Hash类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#List%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">List类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Sets%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Sets类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Zset%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Zset类型</span></a></li></ol></li></ol>","author":{"name":"xiaomaomi","slug":"blog-author","avatar":"https://www.991229.cn/i/2023/04/13/64376d0c494e1.png","link":"/","description":"学习devops的每一天","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"高可用部署k8s集群（二进制）","uid":"d670df397553a310eb51aea95c3eefc2","slug":"高可用部署k8s集群（二进制）","date":"2023-04-14T14:28:03.000Z","updated":"2023-04-14T06:28:04.000Z","comments":true,"path":"api/articles/高可用部署k8s集群（二进制）.json","keywords":null,"cover":null,"text":"（一）环境准备集群节点介绍 IP地址 机器角色 集群组件 192.168.2.188 VIP HAProxy keepalived centos7.5 192.168.2.18 Master1 kube-apiserver kube-controller-manage kube-...","link":"","photos":[],"count_time":{"symbolsCount":"72k","symbolsTime":"1:06"},"categories":[],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/tags/Kubernetes.json"}],"author":{"name":"xiaomaomi","slug":"blog-author","avatar":"https://www.991229.cn/i/2023/04/13/64376d0c494e1.png","link":"/","description":"学习devops的每一天","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}