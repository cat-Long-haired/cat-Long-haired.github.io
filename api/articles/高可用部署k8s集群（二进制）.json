{"title":"高可用部署k8s集群（二进制）","uid":"d670df397553a310eb51aea95c3eefc2","slug":"高可用部署k8s集群（二进制）","date":"2023-04-14T14:28:03.000Z","updated":"2023-04-14T06:28:04.000Z","comments":true,"path":"api/articles/高可用部署k8s集群（二进制）.json","keywords":null,"cover":null,"content":"<h3 id=\"（一）环境准备\"><a href=\"#（一）环境准备\" class=\"headerlink\" title=\"（一）环境准备\"></a>（一）环境准备</h3><h4 id=\"集群节点介绍\"><a href=\"#集群节点介绍\" class=\"headerlink\" title=\"集群节点介绍\"></a>集群节点介绍</h4><table>\n<thead>\n<tr>\n<th><strong>IP地址</strong></th>\n<th><strong>机器角色</strong></th>\n<th><strong>集群组件</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>192.168.2.188</strong></td>\n<td><strong>VIP</strong></td>\n<td><strong>HAProxy keepalived</strong></td>\n<td><strong>centos7.5</strong></td>\n</tr>\n<tr>\n<td><strong>192.168.2.18</strong></td>\n<td><strong>Master1</strong></td>\n<td><strong>kube-apiserver kube-controller-manage kube-scheduler etcd haproxy keepalived docker</strong></td>\n<td><strong>centos7.5</strong></td>\n</tr>\n<tr>\n<td><strong>192.168.2.19</strong></td>\n<td><strong>master2</strong></td>\n<td><strong>kube-apiserver kube-controller-manage kube-scheduler etcd haproxy keepalived dcoker</strong></td>\n<td><strong>centos7.5</strong></td>\n</tr>\n<tr>\n<td><strong>192.168.2.20</strong></td>\n<td><strong>master3</strong></td>\n<td><strong>kube-apiserver kube-controller-manage kube-scheduler etcd haproxy keepalived dcoker</strong></td>\n<td><strong>centos7.5</strong></td>\n</tr>\n<tr>\n<td><strong>192.168.2.21</strong></td>\n<td><strong>node1</strong></td>\n<td><strong>kube-proxy、kubelet</strong></td>\n<td><strong>centos7.5</strong></td>\n</tr>\n<tr>\n<td><strong>192.168.2.22</strong></td>\n<td><strong>node2</strong></td>\n<td><strong>kube-proxy、kubelet</strong></td>\n<td><strong>centos7.5</strong></td>\n</tr>\n<tr>\n<td><strong>192.168.2.23</strong></td>\n<td><strong>node3</strong></td>\n<td><strong>kube-proxy、kubelet</strong></td>\n<td><strong>centos7.5</strong></td>\n</tr>\n</tbody></table>\n<h4 id=\"软件版本\"><a href=\"#软件版本\" class=\"headerlink\" title=\"软件版本\"></a>软件版本</h4><table>\n<thead>\n<tr>\n<th><strong>软件</strong></th>\n<th><strong>版本</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>centos 7.5</strong></td>\n<td><strong>内核：5.19.x</strong></td>\n</tr>\n<tr>\n<td><strong>kube-apiserver、kube-controller-manager、kube-scheduler、kubelet、kube-proxy</strong></td>\n<td><strong>1.22.1</strong></td>\n</tr>\n<tr>\n<td><strong>etcd</strong></td>\n<td><strong>3.5.0</strong></td>\n</tr>\n<tr>\n<td><strong>calico</strong></td>\n<td><strong>3.19.1</strong></td>\n</tr>\n<tr>\n<td><strong>coredns</strong></td>\n<td><strong>1.8.4</strong></td>\n</tr>\n<tr>\n<td><strong>docker</strong></td>\n<td><strong>20.10.9</strong></td>\n</tr>\n<tr>\n<td><strong>haproxy</strong></td>\n<td><strong>1.5.18</strong></td>\n</tr>\n<tr>\n<td><strong>keepalived</strong></td>\n<td><strong>1.3.5</strong></td>\n</tr>\n</tbody></table>\n<h4 id=\"网络分配\"><a href=\"#网络分配\" class=\"headerlink\" title=\"网络分配**\t**\"></a>网络分配**\t**</h4><table>\n<thead>\n<tr>\n<th><strong>网段信息</strong></th>\n<th><strong>配置</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Pod网段</strong></td>\n<td><strong>172.168.0.0&#x2F;12</strong></td>\n</tr>\n<tr>\n<td><strong>Service网段</strong></td>\n<td><strong>10.96.0.0&#x2F;16</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"（二）基础准备\"><a href=\"#（二）基础准备\" class=\"headerlink\" title=\"（二）基础准备\"></a>（二）基础准备</h3><h4 id=\"配置免密\"><a href=\"#配置免密\" class=\"headerlink\" title=\"配置免密\"></a>配置免密</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">#!&#x2F;bin&#x2F;bash\n#机器IP\nIP&#x3D;&#96;cat &#x2F;root&#x2F;shell&#x2F;ip.txt&#96;\n#用户名，密码\nusername&#x3D;root\npasswd&#x3D;1234\n\nPS3&#x3D;&quot;请选择要执行的操作：&quot;\noptions&#x3D;(&quot;生成密钥&quot; &quot;分发密钥&quot; &quot;远程命令执行&quot; &quot;退出&quot;)\n\nwhile true; do\n    select opt in &quot;$&#123;options[@]&#125;&quot;\n    do\n        case $opt in\n            &quot;生成密钥&quot;)\n                echo &quot;正在执行生成密钥...&quot;\n                #生成密钥\n                expect &lt;&lt; EOF\n                    spawn ssh-keygen\n                    expect &#123;\n                            &quot;*(&#x2F;root&#x2F;.ssh&#x2F;id_rsa)&quot; &#123;send &quot;\\r&quot;; exp_continue&#125;\n                            &quot;*(empty for no passphrase)&quot; &#123;send &quot;\\r&quot;; exp_continue&#125;\n                            &quot;*again&quot; &#123;send &quot;\\r&quot;&#125;\n                    &#125;\n                    expect eof\nEOF\n                ;;\n            &quot;分发密钥&quot;)\n                echo &quot;正在执行分发密钥...&quot;\n                #分发密钥\n                for i in $&#123;IP&#125;; do\n                    expect &lt;&lt; EOF\n                        spawn ssh-copy-id -i &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub $&#123;username&#125;@$&#123;i&#125;\n                        expect &#123;\n                            &quot;(yes&#x2F;no)? &quot; &#123;\n                                send &quot;yes\\r&quot;\n                                expect &quot;*assword:&quot; &#123;\n                                    send &quot;$&#123;passwd&#125;\\r&quot;\n                                &#125;\n                            &#125;\n                            &quot;*assword:&quot; &#123;\n                                send &quot;$&#123;passwd&#125;\\r&quot;\n                            &#125;\n                        &#125;\n  \t            expect eof\nEOF\n                done\n                ;;\n           &quot;远程命令执行&quot;)\n                      echo &quot;执行远程命令&quot;\n                      echo &quot;输入你要运行的指令&quot;\n                      read ter\n                      for i in $IP; do\n                          echo &quot;当前服务器IP：&quot; $i\n                          ssh $username@$i &quot;$ter&quot;\n                      done\n                      ;;\n           &quot;退出&quot;)\n                echo &quot;退出程序&quot;\n                break 2\n                ;;\n            *)\n                echo &quot;无效的选项 $REPLY&quot;\n                ;;\n        esac\n    done\ndone</code></pre>\n\n<p>**#### **</p>\n<h4 id=\"修改主机名\"><a href=\"#修改主机名\" class=\"headerlink\" title=\"修改主机名\"></a>修改主机名</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">hostnamectl set-hostname xxx #按照机器规划修改</code></pre>\n\n<h4 id=\"配置hosts\"><a href=\"#配置hosts\" class=\"headerlink\" title=\"配置hosts\"></a>配置hosts</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt;&gt; &#x2F;etc&#x2F;hosts &lt;&lt; EOF\n192.168.2.18 master1\n192.168.2.19 master2\n192.168.2.20 msater3\n192.168.2.21 node1\n192.168.2.22 node2\n192.168.2.23 node3\nEOF</code></pre>\n\n<h4 id=\"关闭firewalld，dnsmasq，selinux，NetworkManager\"><a href=\"#关闭firewalld，dnsmasq，selinux，NetworkManager\" class=\"headerlink\" title=\"关闭firewalld，dnsmasq，selinux，NetworkManager\"></a>关闭firewalld，dnsmasq，selinux，NetworkManager</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl disable --now firewalld \nsystemctl disable --now dnsmasq\nsystemctl disable --now NetworkManager\n\nsetenforce 0\nsed -i &#39;s#SELINUX&#x3D;enforcing#SELINUX&#x3D;disabled#g&#39; &#x2F;etc&#x2F;sysconfig&#x2F;selinux\nsed -i &#39;s#SELINUX&#x3D;enforcing#SELINUX&#x3D;disabled#g&#39; &#x2F;etc&#x2F;selinux&#x2F;config</code></pre>\n\n<h4 id=\"关闭swap\"><a href=\"#关闭swap\" class=\"headerlink\" title=\"关闭swap\"></a>关闭swap</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">swapoff -a &amp;&amp; sysctl -w vm.swappiness&#x3D;0\nsed -ri &#39;s&#x2F;.*swap.*&#x2F;#&amp;&#x2F;&#39; &#x2F;etc&#x2F;fstab  </code></pre>\n\n<h4 id=\"安装必要软件\"><a href=\"#安装必要软件\" class=\"headerlink\" title=\"安装必要软件\"></a>安装必要软件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">rpm -ivh http:&#x2F;&#x2F;mirrors.wlnmp.com&#x2F;centos&#x2F;wlnmp-release-centos.noarch.rpm\nyum install expect ntpdate wget jq psmisc vim ntpdate net-tools telnet yum-utils device-mapper-persistent-data lvm2 git lrzsz ipvsadm ipset sysstat conntrack libseccomp -y</code></pre>\n\n<h4 id=\"时间同步\"><a href=\"#时间同步\" class=\"headerlink\" title=\"时间同步\"></a>时间同步</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime\necho &#39;Asia&#x2F;Shanghai&#39; &gt;&#x2F;etc&#x2F;timezone\nntpdate time2.aliyun.com\n#添加定时任务 同步时间\ncrontab -e\n*&#x2F;5 * * * * &#x2F;usr&#x2F;sbin&#x2F;ntpdate time2.aliyun.com</code></pre>\n\n<h4 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">#limit优化\nulimit -SHn 65535\n\ncat &lt;&lt;EOF &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf\n* soft nofile 655360\n* hard nofile 131072\n* soft nproc 655350\n* hard nproc 655350\n* soft memlock unlimited\n* hard memlock unlimited\nEOF</code></pre>\n\n<h4 id=\"加载ipvs\"><a href=\"#加载ipvs\" class=\"headerlink\" title=\"加载ipvs\"></a>加载ipvs</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">modprobe -- ip_vs \nmodprobe -- ip_vs_rr \nmodprobe -- ip_vs_wrr \nmodprobe -- ip_vs_sh \nmodprobe -- nf_conntrack \n\n\n#创建 &#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf 并加入以下内容： \ncat &gt;&#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf &lt;&lt;EOF \nip_vs \nip_vs_lc \nip_vs_wlc \nip_vs_rr \nip_vs_wrr \nip_vs_lblc \nip_vs_lblcr \nip_vs_dh \nip_vs_sh \nip_vs_fo \nip_vs_nq \nip_vs_sed \nip_vs_ftp \nip_vs_sh \nnf_conntrack \nip_tables \nip_set \nxt_set \nipt_set \nipt_rpfilter \nipt_REJECT \nipip \nEOF\n\n#设置为开机启动\nsystemctl enable --now systemd-modules-load.service</code></pre>\n\n<h4 id=\"k8s内核优化\"><a href=\"#k8s内核优化\" class=\"headerlink\" title=\"k8s内核优化\"></a>k8s内核优化</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf\nnet.ipv4.ip_forward &#x3D; 1\nnet.bridge.bridge-nf-call-iptables &#x3D; 1\nnet.bridge.bridge-nf-call-ip6tables &#x3D; 1\nfs.may_detach_mounts &#x3D; 1\nvm.overcommit_memory&#x3D;1\nvm.panic_on_oom&#x3D;0\nfs.inotify.max_user_watches&#x3D;89100\nfs.file-max&#x3D;52706963\nfs.nr_open&#x3D;52706963\nnet.netfilter.nf_conntrack_max&#x3D;2310720\n\nnet.ipv4.tcp_keepalive_time &#x3D; 600\nnet.ipv4.tcp_keepalive_probes &#x3D; 3\nnet.ipv4.tcp_keepalive_intvl &#x3D;15\nnet.ipv4.tcp_max_tw_buckets &#x3D; 36000\nnet.ipv4.tcp_tw_reuse &#x3D; 1\nnet.ipv4.tcp_max_orphans &#x3D; 327680\nnet.ipv4.tcp_orphan_retries &#x3D; 3\nnet.ipv4.tcp_syncookies &#x3D; 1\nnet.ipv4.tcp_max_syn_backlog &#x3D; 16384\nnet.ipv4.ip_conntrack_max &#x3D; 131072\nnet.ipv4.tcp_max_syn_backlog &#x3D; 16384\nnet.ipv4.tcp_timestamps &#x3D; 0\nnet.core.somaxconn &#x3D; 16384\nEOF\nsysctl --system\n\n#所有节点配置完内核后，重启服务器，保证重启后内核依旧加载\nreboot -h now\n\n#重启后查看结果：\nlsmod | grep --color&#x3D;auto -e ip_vs -e nf_conntrack</code></pre>\n\n<h3 id=\"（三）高可用配置-（使用haproxy和keepalived部署高可用）\"><a href=\"#（三）高可用配置-（使用haproxy和keepalived部署高可用）\" class=\"headerlink\" title=\"（三）高可用配置  （使用haproxy和keepalived部署高可用）\"></a>（三）高可用配置  （使用haproxy和keepalived部署高可用）</h3><h4 id=\"安装keepalived和haproxy\"><a href=\"#安装keepalived和haproxy\" class=\"headerlink\" title=\"安装keepalived和haproxy\"></a>安装keepalived和haproxy</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">yum install keepalived haproxy -y</code></pre>\n\n<h4 id=\"配置haproxy\"><a href=\"#配置haproxy\" class=\"headerlink\" title=\"配置haproxy\"></a>配置haproxy</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">mv etc&#x2F;keepalived&#x2F;keepalived.conf etc&#x2F;keepalived&#x2F;keepalived.conf.bk\ncat &gt;&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf&lt;&lt;&quot;EOF&quot;\n#---------------------------------------------------------------------\n# Example configuration for a possible web application.  See the\n# full configuration options online.\n#\n#   http:&#x2F;&#x2F;haproxy.1wt.eu&#x2F;download&#x2F;1.4&#x2F;doc&#x2F;configuration.txt\n#\n#---------------------------------------------------------------------\n\n#---------------------------------------------------------------------\n# Global settings\n#---------------------------------------------------------------------\nglobal\n    # to have these messages end up in &#x2F;var&#x2F;log&#x2F;haproxy.log you will\n    # need to:\n    #\n    # 1) configure syslog to accept network log events.  This is done\n    #    by adding the &#39;-r&#39; option to the SYSLOGD_OPTIONS in\n    #    &#x2F;etc&#x2F;sysconfig&#x2F;syslog\n    #\n    # 2) configure local2 events to go to the &#x2F;var&#x2F;log&#x2F;haproxy.log\n    #   file. A line like the following can be added to\n    #   &#x2F;etc&#x2F;sysconfig&#x2F;syslog\n    #\n    #    local2.*                       &#x2F;var&#x2F;log&#x2F;haproxy.log\n    #\n    log         127.0.0.1 local2\n\n    chroot      &#x2F;var&#x2F;lib&#x2F;haproxy\n    pidfile     &#x2F;var&#x2F;run&#x2F;haproxy.pid\n    maxconn     4000\n    user        haproxy\n    group       haproxy\n    daemon\n\n    # turn on stats unix socket\n    stats socket &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;stats\n\n#---------------------------------------------------------------------\n# common defaults that all the &#39;listen&#39; and &#39;backend&#39; sections will\n# use if not designated in their block\n#---------------------------------------------------------------------\ndefaults\n    mode                    http\n    log                     global\n    option                  httplog\n    option                  dontlognull\n    option http-server-close\n    option                  redispatch\n    option                  tcplog\n    retries                 3\n    timeout http-request    10s\n    timeout queue           1m\n    timeout connect         10s\n    timeout client          1m\n    timeout server          1m\n    timeout http-keep-alive 10s\n    timeout check           10s\n    maxconn                 3000\n\n#---------------------------------------------------------------------\n# main frontend which proxys to the backends\n#---------------------------------------------------------------------\nfrontend  main *:5000\n    acl url_static       path_beg       -i &#x2F;static &#x2F;images &#x2F;javascript &#x2F;stylesheets\n    acl url_static       path_end       -i .jpg .gif .png .css .js\n\n    use_backend static          if url_static\n    default_backend             app\n\n\n#---------------------------------------------------------------------\n# static backend for serving up images, stylesheets and such\n#---------------------------------------------------------------------\nbackend static\n    balance     roundrobin\n    server      static 127.0.0.1:4331 check\n\n#---------------------------------------------------------------------\n# round robin balancing between the various backends\n#---------------------------------------------------------------------\nbackend app\n    balance     roundrobin\n    server  app1 127.0.0.1:5001 check\n    server  app2 127.0.0.1:5002 check\n    server  app3 127.0.0.1:5003 check\n    server  app4 127.0.0.1:5004 check\n\nlisten k8s-master\n  bind 127.0.0.1:16443\n  bind 0.0.0.0:16443\n  mode tcp\n  server master1 192.168.2.18:6443 check inter 3s fall 3 rise 3   #注意修改IP\n  server master2 192.168.2.19:6443 check inter 3s fall 3 rise 3\n  server master3 192.168.2.20:6443 check inter 3s fall 3 rise 3\nEOF</code></pre>\n\n<h4 id=\"配置keepalived\"><a href=\"#配置keepalived\" class=\"headerlink\" title=\"配置keepalived\"></a>配置keepalived</h4><p><strong>每个master节点不一样 注意修改</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt;&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf&lt;&lt;&quot;EOF&quot;\n! Configuration File for keepalived\nglobal_defs &#123;\n   router_id LVS_DEVEL\nscript_user root\n   enable_script_security\n&#125;\nvrrp_script chk_apiserver &#123;\n   script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh&quot;\n   interval 5\n   weight -5\n   fall 2 \nrise 1\n&#125;\nvrrp_instance VI_1 &#123;\n   state MASTER\n   interface ens33 #注意网卡名字\n   mcast_src_ip 192.168.2.18 #注意修改master节点IP\n   virtual_router_id 51\n   priority 100\n   advert_int 2\n   authentication &#123;\n       auth_type PASS\n       auth_pass K8SHA_KA_AUTH\n   &#125;\n   virtual_ipaddress &#123;\n       192.168.2.188 #此处为VIP 如果不是高可用架构 修改为master1的IP\n   &#125;\n   track_script &#123;\n      chk_apiserver\n   &#125;\n&#125;\nEOF</code></pre>\n\n<h4 id=\"健康检查脚本\"><a href=\"#健康检查脚本\" class=\"headerlink\" title=\"健康检查脚本\"></a>健康检查脚本</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; &#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh &lt;&lt;&quot;EOF&quot;\n#!&#x2F;bin&#x2F;bash\nerr&#x3D;0\nfor k in $(seq 1 3)\ndo\n   check_code&#x3D;$(pgrep haproxy)\n   if [[ $check_code &#x3D;&#x3D; &quot;&quot; ]]; then\n       err&#x3D;$(expr $err + 1)\n       sleep 1\n       continue\n   else\n       err&#x3D;0\n       break\n   fi\ndone\n\nif [[ $err !&#x3D; &quot;0&quot; ]]; then\n   echo &quot;systemctl stop keepalived&quot;\n   &#x2F;usr&#x2F;bin&#x2F;systemctl stop keepalived\n   exit 1\nelse\n   exit 0\nfi\nEOF\n\nchmod u+x &#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh</code></pre>\n\n<h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl daemon-reload\nsystemctl enable --now haproxy\nsystemctl enable --now keepalived</code></pre>\n\n<p><strong>检查VIP是否正常配上</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#master01，看到vip\nip addr\n\n#各节点测试\nsystemctl status keepalived haproxy \nping 192.168.2.188 \ntelnet  192.168.2.188  16443</code></pre>\n\n<h3 id=\"（四）搭建etcd集群\"><a href=\"#（四）搭建etcd集群\" class=\"headerlink\" title=\"（四）搭建etcd集群\"></a>（四）搭建etcd集群</h3><h4 id=\"配置工作目录\"><a href=\"#配置工作目录\" class=\"headerlink\" title=\"配置工作目录\"></a>配置工作目录</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir -p &#x2F;data&#x2F;ssl&#x2F;etc\nmkdir -p &#x2F;data&#x2F;ssl&#x2F;k8s</code></pre>\n\n<h4 id=\"生成cfss证书\"><a href=\"#生成cfss证书\" class=\"headerlink\" title=\"生成cfss证书\"></a>生成cfss证书</h4><h4 id=\"安装cfssl工具\"><a href=\"#安装cfssl工具\" class=\"headerlink\" title=\"安装cfssl工具\"></a>安装cfssl工具</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cd &#x2F;data\nwget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssl_linux-amd64\nwget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssljson_linux-amd64\nwget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssl-certinfo_linux-amd64\n\nchmod +x cfssl*\nmv cfssl_linux-amd64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cfssl\nmv cfssljson_linux-amd64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cfssljson\nmv cfssl-certinfo_linux-amd64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cfssl-certinfo</code></pre>\n\n<h4 id=\"配置ca请求文件\"><a href=\"#配置ca请求文件\" class=\"headerlink\" title=\"配置ca请求文件\"></a>配置ca请求文件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; ca-csr.json &lt;&lt;&quot;EOF&quot;\n&#123;\n  &quot;CN&quot;: &quot;kubernetes&quot;,\n  &quot;key&quot;: &#123;\n      &quot;algo&quot;: &quot;rsa&quot;,\n      &quot;size&quot;: 2048\n  &#125;,\n  &quot;names&quot;: [\n    &#123;\n      &quot;C&quot;: &quot;CN&quot;,\n      &quot;ST&quot;: &quot;Guangdong&quot;,\n      &quot;L&quot;: &quot;shenzhen&quot;,\n      &quot;O&quot;: &quot;k8s&quot;,\n      &quot;OU&quot;: &quot;system&quot;\n    &#125;\n  ],\n  &quot;ca&quot;: &#123;\n          &quot;expiry&quot;: &quot;87600h&quot;\n  &#125;\n&#125;\nEOF</code></pre>\n\n<h4 id=\"创建ca证书\"><a href=\"#创建ca证书\" class=\"headerlink\" title=\"创建ca证书\"></a>创建ca证书</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</code></pre>\n\n<h4 id=\"配置ca证书策略\"><a href=\"#配置ca证书策略\" class=\"headerlink\" title=\"配置ca证书策略\"></a>配置ca证书策略</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; ca-config.json &lt;&lt;&quot;EOF&quot;\n&#123;\n  &quot;signing&quot;: &#123;\n      &quot;default&quot;: &#123;\n          &quot;expiry&quot;: &quot;87600h&quot;\n        &#125;,\n      &quot;profiles&quot;: &#123;\n          &quot;kubernetes&quot;: &#123;\n              &quot;usages&quot;: [\n                  &quot;signing&quot;,\n                  &quot;key encipherment&quot;,\n                  &quot;server auth&quot;,\n                  &quot;client auth&quot;\n              ],\n              &quot;expiry&quot;: &quot;87600h&quot;\n          &#125;\n      &#125;\n  &#125;\n&#125;\nEOF</code></pre>\n\n<h4 id=\"配置etcd请求csr文件\"><a href=\"#配置etcd请求csr文件\" class=\"headerlink\" title=\"配置etcd请求csr文件\"></a>配置etcd请求csr文件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; etcd-csr.json &lt;&lt;&quot;EOF&quot;\n&#123;\n  &quot;CN&quot;: &quot;etcd&quot;,\n  &quot;hosts&quot;: [\n    &quot;127.0.0.1&quot;,\n    &quot;192.168.2.18&quot;, #注意修改IP为master IP\n    &quot;192.168.2.19&quot;,\n    &quot;192.168.2.20&quot;\n  ],\n  &quot;key&quot;: &#123;\n    &quot;algo&quot;: &quot;rsa&quot;,\n    &quot;size&quot;: 2048\n  &#125;,\n  &quot;names&quot;: [&#123;\n    &quot;C&quot;: &quot;CN&quot;,\n    &quot;ST&quot;: &quot;Guangdong&quot;,\n    &quot;L&quot;: &quot;shenzhen&quot;,\n    &quot;O&quot;: &quot;k8s&quot;,\n    &quot;OU&quot;: &quot;system&quot;\n  &#125;]\n&#125;\nEOF</code></pre>\n\n<h4 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;kubernetes etcd-csr.json | cfssljson  -bare etcd\n\nls etcd*.pem\n# etcd-key.pem  etcd.pem</code></pre>\n\n<h4 id=\"下载etcd\"><a href=\"#下载etcd\" class=\"headerlink\" title=\"下载etcd\"></a>下载etcd</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">wget https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;releases&#x2F;download&#x2F;v3.5.0&#x2F;etcd-v3.5.0-linux-amd64.tar.gz\ntar -xvf etcd-v3.5.0-linux-amd64.tar.gz\ncp -p etcd-v3.5.0-linux-amd64&#x2F;etcd* &#x2F;usr&#x2F;local&#x2F;bin&#x2F;\nscp  etcd-v3.5.0-linux-amd64&#x2F;etcd* master2:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;\nscp  etcd-v3.5.0-linux-amd64&#x2F;etcd* master2:&#x2F;usr&#x2F;local&#x2F;bin</code></pre>\n\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt;  etcd.conf &lt;&lt;&quot;EOF&quot;\n#[Member]\nETCD_NAME&#x3D;&quot;etcd1&quot;\nETCD_DATA_DIR&#x3D;&quot;&#x2F;var&#x2F;lib&#x2F;etcd&#x2F;default.etcd&quot;\nETCD_LISTEN_PEER_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.2.18:2380&quot;  #注意修改IP\nETCD_LISTEN_CLIENT_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.2.18:2379,http:&#x2F;&#x2F;127.0.0.1:2379&quot;\n\n#[Clustering]\nETCD_INITIAL_ADVERTISE_PEER_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.2.18:2380&quot;  \nETCD_ADVERTISE_CLIENT_URLS&#x3D;&quot;https:192.168.2.18&#x2F;&#x2F;:2379&quot;\nETCD_INITIAL_CLUSTER&#x3D;&quot;etcd1&#x3D;https:&#x2F;&#x2F;192.168.2.18:2380,etcd2&#x3D;https:&#x2F;&#x2F;192.168.2.19:2380,etcd3&#x3D;https:&#x2F;&#x2F;192.168.2.20:2380&quot;\nETCD_INITIAL_CLUSTER_TOKEN&#x3D;&quot;etcd-cluster&quot;\nETCD_INITIAL_CLUSTER_STATE&#x3D;&quot;new&quot;\nEOF</code></pre>\n\n<h4 id=\"创建启动文件\"><a href=\"#创建启动文件\" class=\"headerlink\" title=\"创建启动文件\"></a>创建启动文件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; etcd.service &lt;&lt;&quot;EOF&quot;\n[Unit]\nDescription&#x3D;Etcd Server\nAfter&#x3D;network.target\nAfter&#x3D;network-online.target\nWants&#x3D;network-online.target\n\n[Service]\nType&#x3D;notify\nEnvironmentFile&#x3D;-&#x2F;etc&#x2F;etcd&#x2F;etcd.conf\nWorkingDirectory&#x3D;&#x2F;var&#x2F;lib&#x2F;etcd&#x2F;\nExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;etcd \\\n  --cert-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem \\\n  --key-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem \\\n  --trusted-ca-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;ca.pem \\\n  --peer-cert-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem \\\n  --peer-key-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem \\\n  --peer-trusted-ca-file&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;ca.pem \\\n  --peer-client-cert-auth \\\n  --client-cert-auth\nRestart&#x3D;on-failure\nRestartSec&#x3D;5\nLimitNOFILE&#x3D;65536\n\n[Install]\nWantedBy&#x3D;multi-user.target\nEOF</code></pre>\n\n<h4 id=\"master节点创建目录\"><a href=\"#master节点创建目录\" class=\"headerlink\" title=\"master节点创建目录\"></a>master节点创建目录</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir -p &#x2F;etc&#x2F;etcd\nmkdir -p &#x2F;etc&#x2F;etcd&#x2F;ssl\nmkdir -p &#x2F;var&#x2F;lib&#x2F;etcd&#x2F;default.etcd</code></pre>\n\n<h4 id=\"同步各个master节点\"><a href=\"#同步各个master节点\" class=\"headerlink\" title=\"同步各个master节点\"></a>同步各个master节点</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cp ca*.pem &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;\ncp etcd*.pem &#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;\ncp etcd.conf &#x2F;etc&#x2F;etcd&#x2F;\ncp etcd.service &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\nfor i in master2 master3;do scp  etcd.conf $i:&#x2F;etc&#x2F;etcd&#x2F;;done\nfor i in master2 master3;do scp  etcd*.pem ca*.pem $i:&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;;done\nfor i in master2 master3;do scp  etcd.service $i:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;;done</code></pre>\n\n<h4 id=\"master2和master3修改IP\"><a href=\"#master2和master3修改IP\" class=\"headerlink\" title=\"master2和master3修改IP\"></a>master2和master3修改IP</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">vim &#x2F;etc&#x2F;etcd&#x2F;etcd.conf</code></pre>\n\n<h4 id=\"启动etcd集群\"><a href=\"#启动etcd集群\" class=\"headerlink\" title=\"启动etcd集群\"></a>启动etcd集群</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl daemon-reload\nsystemctl enable --now etcd.service\nsystemctl status etcd</code></pre>\n\n<h4 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">#注意修改IP\nETCD_API&#x3D;3 etcdctl --write-out&#x3D;table \\\n--cacert&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;ca.pem \\\n--cert&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem \\\n--key&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem \\\n--endpoints&#x3D;https:&#x2F;&#x2F;192.168.2.18:2379,https:&#x2F;&#x2F;192.168.2.19:2379,https:&#x2F;&#x2F;192.168.2.20:2379 endpoint health</code></pre>\n\n<h3 id=\"（五）kuberenets组件配置\"><a href=\"#（五）kuberenets组件配置\" class=\"headerlink\" title=\"（五）kuberenets组件配置\"></a>（五）kuberenets组件配置</h3><h4 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h4><h5 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">wget https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;static&#x2F;stable&#x2F;x86_64&#x2F;docker-20.10.9.tgz</code></pre>\n\n<h5 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">tar -xvf docker-20.10.9.tgz</code></pre>\n\n<h5 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cp docker&#x2F;* &#x2F;usr&#x2F;bin</code></pre>\n\n<h5 id=\"配置docker启动文件\"><a href=\"#配置docker启动文件\" class=\"headerlink\" title=\"配置docker启动文件\"></a>配置docker启动文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service &gt;&gt; EOF\n[Unit]\nDescription&#x3D;Docker Application Container Engine\nDocumentation&#x3D;https:&#x2F;&#x2F;docs.docker.com\nAfter&#x3D;network-online.target firewalld.service\nWants&#x3D;network-online.target\n\n[Service]\nType&#x3D;notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd --selinux-enabled&#x3D;false --insecure-registry&#x3D;192.168.3.10\nExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPID\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE&#x3D;infinity\nLimitNPROC&#x3D;infinity\nLimitCORE&#x3D;infinity\n# Uncomment TasksMax if your systemd version supports it.\n# Only systemd 226 and above support this version.\n#TasksMax&#x3D;infinity\nTimeoutStartSec&#x3D;0\n# set delegate yes so that systemd does not reset the cgroups of docker containers\nDelegate&#x3D;yes\n# kill only the docker process, not all processes in the cgroup\nKillMode&#x3D;process\n# restart the docker process if it exits prematurely\nRestart&#x3D;on-failure\nStartLimitBurst&#x3D;3\nStartLimitInterval&#x3D;60s\n\n[Install]\nWantedBy&#x3D;multi-user.target\nEOF\n\nchmod 777 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service </code></pre>\n\n<h5 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl daemon-reload\nsystemctl start docker\nsystemctl enable docker\nsystemctl status docker</code></pre>\n\n<h4 id=\"下载安装包-1\"><a href=\"#下载安装包-1\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">wget https:&#x2F;&#x2F;dl.k8s.io&#x2F;v1.22.1&#x2F;kubernetes-server-linux-amd64.tar.gz\ntar -xvf kubernetes-server-linux-amd64.tar.gz\ncd kubernetes&#x2F;server&#x2F;bin&#x2F;\ncp kube-apiserver kube-controller-manager kube-scheduler kubectl &#x2F;usr&#x2F;local&#x2F;bin&#x2F;\nscp   kube-apiserver kube-controller-manager kube-scheduler kubectl master2:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;\nscp   kube-apiserver kube-controller-manager kube-scheduler kubectl master3:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;\nfor i in node1 node2.px-k8s ;do scp  kubelet kube-proxy $i:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;;done</code></pre>\n\n<h4 id=\"所有节点创建工作目录\"><a href=\"#所有节点创建工作目录\" class=\"headerlink\" title=\"所有节点创建工作目录\"></a>所有节点创建工作目录</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir -p &#x2F;etc&#x2F;kubernetes&#x2F;      \nmkdir -p &#x2F;etc&#x2F;kubernetes&#x2F;ssl   \nmkdir -p &#x2F;var&#x2F;log&#x2F;kubernetes      </code></pre>\n\n<h4 id=\"部署api-server\"><a href=\"#部署api-server\" class=\"headerlink\" title=\"部署api-server\"></a>部署api-server</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-apiserver-csr.json &lt;&lt; &quot;EOF&quot;\n&#123;\n&quot;CN&quot;: &quot;kubernetes&quot;,\n  &quot;hosts&quot;: [\n    &quot;127.0.0.1&quot;,\n    &quot;192.168.2.188&quot;, #这个是VIP的IP\n    &quot;192.168.2.18&quot;,  #修改master的IP\n    &quot;192.168.2.19&quot;,\n    &quot;192.168.2.20&quot;,\n    &quot;192.168.2.21&quot;,\n    &quot;192.168.2.22&quot;,\n    &quot;192.168.2.23&quot;,\n    &quot;10.96.0.1&quot;,\n    &quot;kubernetes&quot;,\n    &quot;kubernetes.default&quot;,\n    &quot;kubernetes.default.svc&quot;,\n    &quot;kubernetes.default.svc.cluster&quot;,\n    &quot;kubernetes.default.svc.cluster.local&quot;\n  ],\n  &quot;key&quot;: &#123;\n    &quot;algo&quot;: &quot;rsa&quot;,\n    &quot;size&quot;: 2048\n  &#125;,\n  &quot;names&quot;: [\n    &#123;\n      &quot;C&quot;: &quot;CN&quot;,\n      &quot;ST&quot;: &quot;Guangdong&quot;,\n      &quot;L&quot;: &quot;shenzhen&quot;,\n      &quot;O&quot;: &quot;k8s&quot;,\n      &quot;OU&quot;: &quot;system&quot;\n    &#125;\n  ]\n&#125;\nEOF</code></pre>\n\n<h5 id=\"生成证书和token文件\"><a href=\"#生成证书和token文件\" class=\"headerlink\" title=\"生成证书和token文件\"></a>生成证书和token文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver\n\ncat &gt; token.csv &lt;&lt; EOF\n$(head -c 16 &#x2F;dev&#x2F;urandom | od -An -t x | tr -d &#39; &#39;),kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;\nEOF</code></pre>\n\n<h5 id=\"创建配置文件-1\"><a href=\"#创建配置文件-1\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-apiserver.conf &lt;&lt; &quot;EOF&quot;\nKUBE_APISERVER_OPTS&#x3D;&quot;--enable-admission-plugins&#x3D;NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\\n  --anonymous-auth&#x3D;false \\\n  --bind-address&#x3D;192.168.2.18 \\\n  --secure-port&#x3D;6443 \\\n  --advertise-address&#x3D;192.168.2.18 \\\n  --insecure-port&#x3D;0 \\\n  --authorization-mode&#x3D;Node,RBAC \\\n  --runtime-config&#x3D;api&#x2F;all&#x3D;true \\\n  --enable-bootstrap-token-auth \\\n  --service-cluster-ip-range&#x3D;10.96.0.0&#x2F;16 \\\n  --token-auth-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;token.csv \\\n  --service-node-port-range&#x3D;30000-50000 \\\n  --tls-cert-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;kube-apiserver.pem  \\\n  --tls-private-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;kube-apiserver-key.pem \\\n  --client-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca.pem \\\n  --kubelet-client-certificate&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;kube-apiserver.pem \\\n  --kubelet-client-key&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;kube-apiserver-key.pem \\\n  --service-account-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca-key.pem \\\n  --service-account-signing-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca-key.pem  \\\n  --service-account-issuer&#x3D;api \\\n  --etcd-cafile&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;ca.pem \\\n  --etcd-certfile&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd.pem \\\n  --etcd-keyfile&#x3D;&#x2F;etc&#x2F;etcd&#x2F;ssl&#x2F;etcd-key.pem \\\n  --etcd-servers&#x3D;https:&#x2F;&#x2F;192.168.2.18:2379,https:&#x2F;&#x2F;192.168.2.19:2379,https:&#x2F;&#x2F;192.168.2.20:2379 \\\n  --enable-swagger-ui&#x3D;true \\\n  --allow-privileged&#x3D;true \\\n  --apiserver-count&#x3D;3 \\\n  --audit-log-maxage&#x3D;30 \\\n  --audit-log-maxbackup&#x3D;3 \\\n  --audit-log-maxsize&#x3D;100 \\\n  --audit-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;kube-apiserver-audit.log \\\n  --event-ttl&#x3D;1h \\\n  --alsologtostderr&#x3D;true \\\n  --logtostderr&#x3D;false \\\n  --log-dir&#x3D;&#x2F;var&#x2F;log&#x2F;kubernetes \\\n  --v&#x3D;4&quot;\nEOF</code></pre>\n\n<h5 id=\"创建apiserver文件\"><a href=\"#创建apiserver文件\" class=\"headerlink\" title=\"创建apiserver文件\"></a>创建apiserver文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-apiserver.service &lt;&lt; &quot;EOF&quot;\n[Unit]\nDescription&#x3D;Kubernetes API Server\nDocumentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes\nAfter&#x3D;etcd.service\nWants&#x3D;etcd.service\n\n[Service]\nEnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;kube-apiserver.conf\nExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kube-apiserver $KUBE_APISERVER_OPTS\nRestart&#x3D;on-failure\nRestartSec&#x3D;5\nType&#x3D;notify\nLimitNOFILE&#x3D;65536\n\n[Install]\nWantedBy&#x3D;multi-user.target\nEOF</code></pre>\n\n<h5 id=\"同步文件到节点上\"><a href=\"#同步文件到节点上\" class=\"headerlink\" title=\"同步文件到节点上\"></a>同步文件到节点上</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cp ca*.pem &#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\ncp kube-apiserver*.pem &#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\ncp token.csv &#x2F;etc&#x2F;kubernetes&#x2F;\ncp kube-apiserver.conf &#x2F;etc&#x2F;kubernetes&#x2F; \ncp kube-apiserver.service &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\nscp   token.csv master2:&#x2F;etc&#x2F;kubernetes&#x2F;\nscp   token.csv master3:&#x2F;etc&#x2F;kubernetes&#x2F;\nscp   kube-apiserver*.pem master2:&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\nscp   kube-apiserver*.pem master3:&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\nscp   ca*.pem master2:&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\nscp   ca*.pem master3:&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\nscp   kube-apiserver.conf master2:&#x2F;etc&#x2F;kubernetes&#x2F;\nscp   kube-apiserver.conf master03.px-k8s:&#x2F;etc&#x2F;kubernetes&#x2F;\nscp   kube-apiserver.service master2:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\nscp   kube-apiserver.service master3:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</code></pre>\n\n<h5 id=\"修改master2和master3的IP\"><a href=\"#修改master2和master3的IP\" class=\"headerlink\" title=\"修改master2和master3的IP\"></a>修改master2和master3的IP</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">vim &#x2F;etc&#x2F;kubernetes&#x2F;kube-apiserver.conf</code></pre>\n\n<h5 id=\"启动服务-1\"><a href=\"#启动服务-1\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl daemon-reload\nsystemctl enable --now kube-apiserver\nsystemctl status kube-apiserver\n\n# 测试\ncurl --insecure https:&#x2F;&#x2F;192.168.2.18:6443&#x2F;\ncurl --insecure https:&#x2F;&#x2F;192.168.2.19:6443&#x2F;\ncurl --insecure https:&#x2F;&#x2F;192.168.2.20:6443&#x2F;\ncurl --insecure https:&#x2F;&#x2F;192.168.2.188:16443&#x2F;</code></pre>\n\n<h4 id=\"部署kube-controller-manager\"><a href=\"#部署kube-controller-manager\" class=\"headerlink\" title=\"部署kube-controller-manager\"></a>部署kube-controller-manager</h4><h5 id=\"创建csr请求文件\"><a href=\"#创建csr请求文件\" class=\"headerlink\" title=\"创建csr请求文件\"></a>创建csr请求文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-controller-manager-csr.json &lt;&lt; &quot;EOF&quot;\n&#123;\n    &quot;CN&quot;: &quot;system:kube-controller-manager&quot;,\n    &quot;key&quot;: &#123;\n        &quot;algo&quot;: &quot;rsa&quot;,\n        &quot;size&quot;: 2048\n    &#125;,\n    &quot;hosts&quot;: [\n      &quot;127.0.0.1&quot;,\n      &quot;192.168.2.18&quot;,\n      &quot;192.168.2.19&quot;,\n      &quot;192.168.2.20&quot;\n    ],\n    &quot;names&quot;: [\n      &#123;\n        &quot;C&quot;: &quot;CN&quot;,\n        &quot;ST&quot;: &quot;Guangdong&quot;,\n        &quot;L&quot;: &quot;shenzhen&quot;,\n        &quot;O&quot;: &quot;system:kube-controller-manager&quot;,\n        &quot;OU&quot;: &quot;system&quot;\n      &#125;\n    ]\n&#125;\nEOF</code></pre>\n\n<h5 id=\"生成证书-1\"><a href=\"#生成证书-1\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager\n\nls kube-controller-manager*.pem</code></pre>\n\n<h5 id=\"创建kubeconfig配置文件\"><a href=\"#创建kubeconfig配置文件\" class=\"headerlink\" title=\"创建kubeconfig配置文件\"></a>创建kubeconfig配置文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl config set-cluster kubernetes --certificate-authority&#x3D;ca.pem --embed-certs&#x3D;true --server&#x3D;https:&#x2F;&#x2F;192.168.2.188:16443 --kubeconfig&#x3D;kube-controller-manager.kubeconfig\nkubectl config set-credentials system:kube-controller-manager --client-certificate&#x3D;kube-controller-manager.pem --client-key&#x3D;kube-controller-manager-key.pem --embed-certs&#x3D;true --kubeconfig&#x3D;kube-controller-manager.kubeconfig\nkubectl config set-context system:kube-controller-manager --cluster&#x3D;kubernetes --user&#x3D;system:kube-controller-manager --kubeconfig&#x3D;kube-controller-manager.kubeconfig\nkubectl config use-context system:kube-controller-manager --kubeconfig&#x3D;kube-controller-manager.kubeconfig</code></pre>\n\n<h5 id=\"创建conf配置文件\"><a href=\"#创建conf配置文件\" class=\"headerlink\" title=\"创建conf配置文件\"></a>创建conf配置文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-controller-manager.conf &lt;&lt; &quot;EOF&quot;\nKUBE_CONTROLLER_MANAGER_OPTS&#x3D;&quot;--port&#x3D;0 \\\n  --secure-port&#x3D;10257 \\\n  --bind-address&#x3D;127.0.0.1 \\\n  --kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kube-controller-manager.kubeconfig \\\n  --service-cluster-ip-range&#x3D;10.96.0.0&#x2F;16 \\\n  --cluster-name&#x3D;kubernetes \\\n  --cluster-signing-cert-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca.pem \\\n  --cluster-signing-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca-key.pem \\\n  --allocate-node-cidrs&#x3D;true \\\n  --cluster-cidr&#x3D;172.168.0.0&#x2F;16 \\\n  --experimental-cluster-signing-duration&#x3D;87600h \\\n  --root-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca.pem \\\n  --service-account-private-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca-key.pem \\\n  --leader-elect&#x3D;true \\\n  --feature-gates&#x3D;RotateKubeletServerCertificate&#x3D;true \\\n  --controllers&#x3D;*,bootstrapsigner,tokencleaner \\\n  --horizontal-pod-autoscaler-sync-period&#x3D;10s \\\n  --tls-cert-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;kube-controller-manager.pem \\\n  --tls-private-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;kube-controller-manager-key.pem \\\n  --use-service-account-credentials&#x3D;true \\\n  --alsologtostderr&#x3D;true \\\n  --logtostderr&#x3D;false \\\n  --log-dir&#x3D;&#x2F;var&#x2F;log&#x2F;kubernetes \\\n  --v&#x3D;2&quot;\nEOF</code></pre>\n\n<h5 id=\"创建启动文件-1\"><a href=\"#创建启动文件-1\" class=\"headerlink\" title=\"创建启动文件\"></a>创建启动文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-controller-manager.service &lt;&lt; &quot;EOF&quot;\n[Unit]\nDescription&#x3D;Kubernetes Controller Manager\nDocumentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes\n\n[Service]\nEnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;kube-controller-manager.conf\nExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kube-controller-manager $KUBE_CONTROLLER_MANAGER_OPTS\nRestart&#x3D;on-failure\nRestartSec&#x3D;5\n\n[Install]\nWantedBy&#x3D;multi-user.target\nEOF</code></pre>\n\n<h5 id=\"同步相关文件到各个节点\"><a href=\"#同步相关文件到各个节点\" class=\"headerlink\" title=\"同步相关文件到各个节点\"></a>同步相关文件到各个节点</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cp kube-controller-manager*.pem &#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\ncp kube-controller-manager.kubeconfig &#x2F;etc&#x2F;kubernetes&#x2F;\ncp kube-controller-manager.conf &#x2F;etc&#x2F;kubernetes&#x2F;\ncp kube-controller-manager.service &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\nscp  kube-controller-manager*.pem master2:&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\nscp  kube-controller-manager*.pem master3:&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\nscp  kube-controller-manager.kubeconfig kube-controller-manager.conf master2:&#x2F;etc&#x2F;kubernetes&#x2F;\nscp  kube-controller-manager.kubeconfig kube-controller-manager.conf master3:&#x2F;etc&#x2F;kubernetes&#x2F;\nscp  kube-controller-manager.service master2:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\nscp  kube-controller-manager.service master3:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\n\n#查看证书\nopenssl x509 -in &#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;kube-controller-manager.pem -noout -text</code></pre>\n\n<h5 id=\"启动服务-2\"><a href=\"#启动服务-2\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl daemon-reload \nsystemctl enable --now kube-controller-manager\nsystemctl status kube-controller-manager</code></pre>\n\n<h4 id=\"部署kube-scheduler\"><a href=\"#部署kube-scheduler\" class=\"headerlink\" title=\"部署kube-scheduler\"></a>部署kube-scheduler</h4><h5 id=\"创建csr请求文件-1\"><a href=\"#创建csr请求文件-1\" class=\"headerlink\" title=\"创建csr请求文件\"></a>创建csr请求文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-scheduler-csr.json &lt;&lt; &quot;EOF&quot;\n&#123;\n    &quot;CN&quot;: &quot;system:kube-scheduler&quot;,\n    &quot;hosts&quot;: [\n      &quot;127.0.0.1&quot;,\n      &quot;192.168.2.18&quot;,\n      &quot;192.168.2.19&quot;,\n      &quot;192.168.2.20&quot;\n    ],\n    &quot;key&quot;: &#123;\n        &quot;algo&quot;: &quot;rsa&quot;,\n        &quot;size&quot;: 2048\n    &#125;,\n    &quot;names&quot;: [\n      &#123;\n        &quot;C&quot;: &quot;CN&quot;,\n        &quot;ST&quot;: &quot;Guangdong&quot;,\n        &quot;L&quot;: &quot;shenzhen&quot;,\n        &quot;O&quot;: &quot;system:kube-scheduler&quot;,\n        &quot;OU&quot;: &quot;system&quot;\n      &#125;\n    ]\n&#125;\nEOF</code></pre>\n\n<h5 id=\"生成证书-2\"><a href=\"#生成证书-2\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler\n\nls kube-scheduler*.pem</code></pre>\n\n<h5 id=\"创建kubeconfig\"><a href=\"#创建kubeconfig\" class=\"headerlink\" title=\"创建kubeconfig\"></a>创建kubeconfig</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl config set-cluster kubernetes --certificate-authority&#x3D;ca.pem --embed-certs&#x3D;true --server&#x3D;https:&#x2F;&#x2F;192.168.2.188:16443 --kubeconfig&#x3D;kube-scheduler.kubeconfig\nkubectl config set-credentials system:kube-scheduler --client-certificate&#x3D;kube-scheduler.pem --client-key&#x3D;kube-scheduler-key.pem --embed-certs&#x3D;true --kubeconfig&#x3D;kube-scheduler.kubeconfig\nkubectl config set-context system:kube-scheduler --cluster&#x3D;kubernetes --user&#x3D;system:kube-scheduler --kubeconfig&#x3D;kube-scheduler.kubeconfig\nkubectl config use-context system:kube-scheduler --kubeconfig&#x3D;kube-scheduler.kubeconfig</code></pre>\n\n<h5 id=\"创建配置文件-2\"><a href=\"#创建配置文件-2\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-scheduler.conf &lt;&lt; &quot;EOF&quot;\nKUBE_SCHEDULER_OPTS&#x3D;&quot;--address&#x3D;127.0.0.1 \\\n--kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kube-scheduler.kubeconfig \\\n--leader-elect&#x3D;true \\\n--alsologtostderr&#x3D;true \\\n--logtostderr&#x3D;false \\\n--log-dir&#x3D;&#x2F;var&#x2F;log&#x2F;kubernetes \\\n--v&#x3D;2&quot;\nEOF</code></pre>\n\n<h5 id=\"创建启动文件-2\"><a href=\"#创建启动文件-2\" class=\"headerlink\" title=\"创建启动文件\"></a>创建启动文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-scheduler.service &lt;&lt; &quot;EOF&quot;\n[Unit]\nDescription&#x3D;Kubernetes Scheduler\nDocumentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes\n\n[Service]\nEnvironmentFile&#x3D;-&#x2F;etc&#x2F;kubernetes&#x2F;kube-scheduler.conf\nExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kube-scheduler $KUBE_SCHEDULER_OPTS\nRestart&#x3D;on-failure\nRestartSec&#x3D;5\n\n[Install]\nWantedBy&#x3D;multi-user.target\nEOF</code></pre>\n\n<h5 id=\"同步文件\"><a href=\"#同步文件\" class=\"headerlink\" title=\"同步文件\"></a>同步文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cp kube-scheduler*.pem &#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\ncp kube-scheduler.kubeconfig &#x2F;etc&#x2F;kubernetes&#x2F;\ncp kube-scheduler.conf &#x2F;etc&#x2F;kubernetes&#x2F;\ncp kube-scheduler.service &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\nscp  kube-scheduler*.pem master2:&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\nscp  kube-scheduler*.pem master3:&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\nscp  kube-scheduler.kubeconfig kube-scheduler.conf master2-k8s:&#x2F;etc&#x2F;kubernetes&#x2F;\nscp  kube-scheduler.kubeconfig kube-scheduler.conf master3:&#x2F;etc&#x2F;kubernetes&#x2F;\nscp  kube-scheduler.service master2:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\nscp  kube-scheduler.service master3:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</code></pre>\n\n<h5 id=\"启动服务-3\"><a href=\"#启动服务-3\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl daemon-reload\nsystemctl enable --now kube-scheduler\nsystemctl status kube-scheduler</code></pre>\n\n<h4 id=\"部署kubectl\"><a href=\"#部署kubectl\" class=\"headerlink\" title=\"部署kubectl\"></a>部署kubectl</h4><h5 id=\"创建csr请求文件-2\"><a href=\"#创建csr请求文件-2\" class=\"headerlink\" title=\"创建csr请求文件\"></a>创建csr请求文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; admin-csr.json &lt;&lt; &quot;EOF&quot;\n&#123;\n  &quot;CN&quot;: &quot;admin&quot;,\n  &quot;hosts&quot;: [],\n  &quot;key&quot;: &#123;\n    &quot;algo&quot;: &quot;rsa&quot;,\n    &quot;size&quot;: 2048\n  &#125;,\n  &quot;names&quot;: [\n    &#123;\n      &quot;C&quot;: &quot;CN&quot;,\n      &quot;ST&quot;: &quot;Guangdong&quot;,\n      &quot;L&quot;: &quot;shenzhen&quot;,\n      &quot;O&quot;: &quot;system:masters&quot;,           \n      &quot;OU&quot;: &quot;system&quot;\n    &#125;\n  ]\n&#125;\nEOF</code></pre>\n\n<h5 id=\"生成证书-3\"><a href=\"#生成证书-3\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;kubernetes admin-csr.json | cfssljson -bare admin\n\ncp admin*.pem &#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;</code></pre>\n\n<h5 id=\"kubeconfig配置\"><a href=\"#kubeconfig配置\" class=\"headerlink\" title=\"kubeconfig配置\"></a>kubeconfig配置</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">#记得修改IP\nkubectl config set-cluster kubernetes --certificate-authority&#x3D;ca.pem --embed-certs&#x3D;true --server&#x3D;https:&#x2F;&#x2F;192.168.2.18:16443 --kubeconfig&#x3D;kube.config\nkubectl config set-credentials admin --client-certificate&#x3D;admin.pem --client-key&#x3D;admin-key.pem --embed-certs&#x3D;true --kubeconfig&#x3D;kube.config\nkubectl config set-context kubernetes --cluster&#x3D;kubernetes --user&#x3D;admin --kubeconfig&#x3D;kube.config\nkubectl config use-context kubernetes --kubeconfig&#x3D;kube.config\n\nmkdir ~&#x2F;.kube\ncp kube.config ~&#x2F;.kube&#x2F;config\nkubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole&#x3D;system:kubelet-api-admin --user kubernetes --kubeconfig&#x3D;~&#x2F;.kube&#x2F;config</code></pre>\n\n<h5 id=\"查看集群状态-1\"><a href=\"#查看集群状态-1\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">export KUBECONFIG&#x3D;$HOME&#x2F;.kube&#x2F;config\n\nkubectl cluster-info\nkubectl get componentstatuses\nkubectl get all --all-namespaces</code></pre>\n\n<h5 id=\"同步文件到其他节点\"><a href=\"#同步文件到其他节点\" class=\"headerlink\" title=\"同步文件到其他节点\"></a>同步文件到其他节点</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">scp    &#x2F;root&#x2F;.kube&#x2F;config master2:&#x2F;root&#x2F;.kube&#x2F;\nscp    &#x2F;root&#x2F;.kube&#x2F;config master3:&#x2F;root&#x2F;.kube&#x2F;</code></pre>\n\n<h5 id=\"配置kubectl命令补全\"><a href=\"#配置kubectl命令补全\" class=\"headerlink\" title=\"配置kubectl命令补全\"></a>配置kubectl命令补全</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">yum install -y bash-completion\nsource &#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;bash_completion\nsource &lt;(kubectl completion bash)\nkubectl completion bash &gt; ~&#x2F;.kube&#x2F;completion.bash.inc\nsource &#39;&#x2F;root&#x2F;.kube&#x2F;completion.bash.inc&#39;  \nsource $HOME&#x2F;.bash_profile</code></pre>\n\n<h3 id=\"（六）TLS-Bootstrapping-配置\"><a href=\"#（六）TLS-Bootstrapping-配置\" class=\"headerlink\" title=\"（六）TLS  Bootstrapping 配置\"></a>（六）TLS  Bootstrapping 配置</h3><h5 id=\"在master1创建bootstrap\"><a href=\"#在master1创建bootstrap\" class=\"headerlink\" title=\"在master1创建bootstrap\"></a>在master1创建bootstrap</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cd &#x2F;root&#x2F;k8s-ha-install&#x2F;bootstrap\nkubectl config set-cluster kubernetes     --certificate-authority&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca.pem     --embed-certs&#x3D;true     --server&#x3D;https:&#x2F;&#x2F;192.168.2.188:16443     --kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;bootstrap-kubelet.kubeconfig\nkubectl config set-credentials tls-bootstrap-token-user     --token&#x3D;c8ad9c.2e4d610cf3e7426e --kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;bootstrap-kubelet.kubeconfig\nkubectl config set-context tls-bootstrap-token-user@kubernetes     --cluster&#x3D;kubernetes     --user&#x3D;tls-bootstrap-token-user     --kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;bootstrap-kubelet.kubeconfig\nkubectl config use-context tls-bootstrap-token-user@kubernetes     --kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;bootstrap-kubelet.kubeconfig</code></pre>\n\n<h5 id=\"创建yaml\"><a href=\"#创建yaml\" class=\"headerlink\" title=\"创建yaml\"></a>创建yaml</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@k8s-master01 bootstrap]# cat bootstrap.secret.yaml \napiVersion: v1\nkind: Secret\nmetadata:\n  name: bootstrap-token-c8ad9c\n  namespace: kube-system\ntype: bootstrap.kubernetes.io&#x2F;token\nstringData:\n  description: &quot;The default bootstrap token generated by &#39;kubelet &#39;.&quot;\n  token-id: c8ad9c\n  token-secret: 2e4d610cf3e7426e\n  usage-bootstrap-authentication: &quot;true&quot;\n  usage-bootstrap-signing: &quot;true&quot;\n  auth-extra-groups:  system:bootstrappers:default-node-token,system:bootstrappers:worker,system:bootstrappers:ingress\n\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kubelet-bootstrap\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:node-bootstrapper\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: system:bootstrappers:default-node-token\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRoleBinding\nmetadata:\n  name: node-autoapprove-bootstrap\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:certificates.k8s.io:certificatesigningrequests:nodeclient\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: system:bootstrappers:default-node-token\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRoleBinding\nmetadata:\n  name: node-autoapprove-certificate-rotation\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: system:nodes\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io&#x2F;autoupdate: &quot;true&quot;\n  labels:\n    kubernetes.io&#x2F;bootstrapping: rbac-defaults\n  name: system:kube-apiserver-to-kubelet\nrules:\n  - apiGroups:\n      - &quot;&quot;\n    resources:\n      - nodes&#x2F;proxy\n      - nodes&#x2F;stats\n      - nodes&#x2F;log\n      - nodes&#x2F;spec\n      - nodes&#x2F;metrics\n    verbs:\n      - &quot;*&quot;\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:kube-apiserver\n  namespace: &quot;&quot;\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-apiserver-to-kubelet\nsubjects:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: kube-apiserver</code></pre>\n\n<h5 id=\"启动bootstrap\"><a href=\"#启动bootstrap\" class=\"headerlink\" title=\"启动bootstrap\"></a>启动bootstrap</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir -p &#x2F;root&#x2F;.kube ; cp &#x2F;etc&#x2F;kubernetes&#x2F;admin.kubeconfig &#x2F;root&#x2F;.kube&#x2F;config\nkubectl create -f bootstrap.secret.yaml </code></pre>\n\n<h3 id=\"（七）node节点部署\"><a href=\"#（七）node节点部署\" class=\"headerlink\" title=\"（七）node节点部署\"></a>（七）node节点部署</h3><h4 id=\"部署kubelet\"><a href=\"#部署kubelet\" class=\"headerlink\" title=\"部署kubelet\"></a>部署kubelet</h4><h5 id=\"在master1节点上执行\"><a href=\"#在master1节点上执行\" class=\"headerlink\" title=\"在master1节点上执行\"></a>在master1节点上执行</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">BOOTSTRAP_TOKEN&#x3D;$(awk -F &quot;,&quot; &#39;&#123;print $1&#125;&#39; &#x2F;etc&#x2F;kubernetes&#x2F;token.csv)\nkubectl config set-cluster kubernetes --certificate-authority&#x3D;ca.pem --embed-certs&#x3D;true --server&#x3D;https:&#x2F;&#x2F;192.168.2.188:16443 --kubeconfig&#x3D;kubelet-bootstrap.kubeconfig\nkubectl config set-credentials kubelet-bootstrap --token&#x3D;$&#123;BOOTSTRAP_TOKEN&#125; --kubeconfig&#x3D;kubelet-bootstrap.kubeconfig\nkubectl config set-context default --cluster&#x3D;kubernetes --user&#x3D;kubelet-bootstrap --kubeconfig&#x3D;kubelet-bootstrap.kubeconfig\nkubectl config use-context default --kubeconfig&#x3D;kubelet-bootstrap.kubeconfig\nkubectl create clusterrolebinding kubelet-bootstrap --clusterrole&#x3D;system:node-bootstrapper --user&#x3D;kubelet-bootstrap --kubeconfig&#x3D;&#x2F;root&#x2F;.kube&#x2F;config</code></pre>\n\n<h5 id=\"创建配置文件-3\"><a href=\"#创建配置文件-3\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kubelet.json &lt;&lt; &quot;EOF&quot;\n&#123;\n  &quot;kind&quot;: &quot;KubeletConfiguration&quot;,\n  &quot;apiVersion&quot;: &quot;kubelet.config.k8s.io&#x2F;v1beta1&quot;,\n  &quot;authentication&quot;: &#123;\n    &quot;x509&quot;: &#123;\n      &quot;clientCAFile&quot;: &quot;&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;ca.pem&quot;\n    &#125;,\n    &quot;webhook&quot;: &#123;\n      &quot;enabled&quot;: true,\n      &quot;cacheTTL&quot;: &quot;2m0s&quot;\n    &#125;,\n    &quot;anonymous&quot;: &#123;\n      &quot;enabled&quot;: false\n    &#125;\n  &#125;,\n  &quot;authorization&quot;: &#123;\n    &quot;mode&quot;: &quot;Webhook&quot;,\n    &quot;webhook&quot;: &#123;\n      &quot;cacheAuthorizedTTL&quot;: &quot;5m0s&quot;,\n      &quot;cacheUnauthorizedTTL&quot;: &quot;30s&quot;\n    &#125;\n  &#125;,\n  &quot;address&quot;: &quot;192.168.2.18&quot;,\n  &quot;port&quot;: 10250,\n  &quot;readOnlyPort&quot;: 10255,\n  &quot;cgroupDriver&quot;: &quot;systemd&quot;,                  \n  &quot;hairpinMode&quot;: &quot;promiscuous-bridge&quot;,\n  &quot;serializeImagePulls&quot;: false,\n  &quot;clusterDomain&quot;: &quot;cluster.local.&quot;,\n  &quot;clusterDNS&quot;: [&quot;10.96.0.2&quot;]\n&#125;\nEOF</code></pre>\n\n<h5 id=\"创建启动文件-3\"><a href=\"#创建启动文件-3\" class=\"headerlink\" title=\"创建启动文件\"></a>创建启动文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kubelet.service &lt;&lt; &quot;EOF&quot;\n[Unit]\nDescription&#x3D;Kubernetes Kubelet\nDocumentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes\nAfter&#x3D;docker.service\nRequires&#x3D;docker.service\n\n[Service]\nWorkingDirectory&#x3D;&#x2F;var&#x2F;lib&#x2F;kubelet\nExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubelet \\\n  --bootstrap-kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet-bootstrap.kubeconfig \\\n  --cert-dir&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;ssl \\\n  --kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet.kubeconfig \\\n  --config&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet.json \\\n  --network-plugin&#x3D;cni \\\n  --rotate-certificates \\\n  --pod-infra-container-image&#x3D;registry.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.2 \\\n  --alsologtostderr&#x3D;true \\\n  --logtostderr&#x3D;false \\\n  --log-dir&#x3D;&#x2F;var&#x2F;log&#x2F;kubernetes \\\n  --v&#x3D;2\nRestart&#x3D;on-failure\nRestartSec&#x3D;5\n\n[Install]\nWantedBy&#x3D;multi-user.target\nEOF</code></pre>\n\n<h5 id=\"同步文件-1\"><a href=\"#同步文件-1\" class=\"headerlink\" title=\"同步文件\"></a>同步文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cp kubelet-bootstrap.kubeconfig &#x2F;etc&#x2F;kubernetes&#x2F;\ncp kubelet.json &#x2F;etc&#x2F;kubernetes&#x2F;\ncp kubelet.service &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\n\nfor i in  master2 master3 node1 node2 node3;do scp  kubelet-bootstrap.kubeconfig kubelet.json $i:&#x2F;etc&#x2F;kubernetes&#x2F;;done\n\nfor i in  master2 master3 node1 node2 node3;do scp  ca.pem $i:&#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;;done\n\nfor i in master2 master3 node1 node2 node3;do scp  kubelet.service $i:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;;done</code></pre>\n\n<h5 id=\"所有节点执行\"><a href=\"#所有节点执行\" class=\"headerlink\" title=\"所有节点执行\"></a>所有节点执行</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir -p &#x2F;var&#x2F;lib&#x2F;kubelet\nmkdir -p &#x2F;var&#x2F;log&#x2F;kubernetes\nsystemctl daemon-reload\nsystemctl enable --now kubelet\n\nsystemctl status kubelet</code></pre>\n\n<h5 id=\"节点加入集群\"><a href=\"#节点加入集群\" class=\"headerlink\" title=\"节点加入集群\"></a>节点加入集群</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl get csr | grep Pending | awk &#39;&#123;print $1&#125;&#39; | xargs kubectl certificate approve\nkubectl get nodes</code></pre>\n\n<h4 id=\"部署kube-proxy\"><a href=\"#部署kube-proxy\" class=\"headerlink\" title=\"部署kube-proxy\"></a>部署kube-proxy</h4><h5 id=\"创建csr请求文件-3\"><a href=\"#创建csr请求文件-3\" class=\"headerlink\" title=\"创建csr请求文件\"></a>创建csr请求文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-proxy-csr.json &lt;&lt; &quot;EOF&quot;\n&#123;\n  &quot;CN&quot;: &quot;system:kube-proxy&quot;,\n  &quot;key&quot;: &#123;\n    &quot;algo&quot;: &quot;rsa&quot;,\n    &quot;size&quot;: 2048\n  &#125;,\n  &quot;names&quot;: [\n    &#123;\n      &quot;C&quot;: &quot;CN&quot;,\n      &quot;ST&quot;: &quot;Guangdong&quot;,\n      &quot;L&quot;: &quot;shenzhen&quot;,\n      &quot;O&quot;: &quot;k8s&quot;,\n      &quot;OU&quot;: &quot;system&quot;\n    &#125;\n  ]\n&#125;\nEOF</code></pre>\n\n<h5 id=\"生成证书-4\"><a href=\"#生成证书-4\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy\nls kube-proxy*.pem</code></pre>\n\n<h5 id=\"创建config文件\"><a href=\"#创建config文件\" class=\"headerlink\" title=\"创建config文件\"></a>创建config文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl config set-cluster kubernetes --certificate-authority&#x3D;ca.pem --embed-certs&#x3D;true --server&#x3D;https:&#x2F;&#x2F;192.168.2.188:16443 --kubeconfig&#x3D;kube-proxy.kubeconfig\n\nkubectl config set-credentials kube-proxy --client-certificate&#x3D;kube-proxy.pem --client-key&#x3D;kube-proxy-key.pem --embed-certs&#x3D;true --kubeconfig&#x3D;kube-proxy.kubeconfig\n\nkubectl config set-context default --cluster&#x3D;kubernetes --user&#x3D;kube-proxy --kubeconfig&#x3D;kube-proxy.kubeconfig\n\nkubectl config use-context default --kubeconfig&#x3D;kube-proxy.kubeconfig</code></pre>\n\n<h5 id=\"创建配置文件-4\"><a href=\"#创建配置文件-4\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt; kube-proxy.yaml &lt;&lt; &quot;EOF&quot;\napiVersion: kubeproxy.config.k8s.io&#x2F;v1alpha1\nbindAddress: 10.10.0.78\nclientConnection:\n  kubeconfig: &#x2F;etc&#x2F;kubernetes&#x2F;kube-proxy.kubeconfig\nclusterCIDR: 172.168.0.0&#x2F;12\nhealthzBindAddress: 192.168.2.18:10256\nkind: KubeProxyConfiguration\nmetricsBindAddress: 192.168.2.18:10249\nmode: &quot;ipvs&quot;\nEOF</code></pre>\n\n<h5 id=\"创建启动文件-4\"><a href=\"#创建启动文件-4\" class=\"headerlink\" title=\"创建启动文件\"></a>创建启动文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat &gt;  kube-proxy.service &lt;&lt; &quot;EOF&quot;\n[Unit]\nDescription&#x3D;Kubernetes Kube-Proxy Server\nDocumentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes\nAfter&#x3D;network.target\n\n[Service]\nWorkingDirectory&#x3D;&#x2F;var&#x2F;lib&#x2F;kube-proxy\nExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kube-proxy \\\n  --config&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;kube-proxy.yaml \\\n  --alsologtostderr&#x3D;true \\\n  --logtostderr&#x3D;false \\\n  --log-dir&#x3D;&#x2F;var&#x2F;log&#x2F;kubernetes \\\n  --v&#x3D;2\nRestart&#x3D;on-failure\nRestartSec&#x3D;5\nLimitNOFILE&#x3D;65536\n\n[Install]\nWantedBy&#x3D;multi-user.target\nEOF</code></pre>\n\n<h5 id=\"同步文件-2\"><a href=\"#同步文件-2\" class=\"headerlink\" title=\"同步文件\"></a>同步文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cp kube-proxy*.pem &#x2F;etc&#x2F;kubernetes&#x2F;ssl&#x2F;\ncp kube-proxy.kubeconfig kube-proxy.yaml &#x2F;etc&#x2F;kubernetes&#x2F;\ncp kube-proxy.service &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;\nfor i in msater2 master3 node1 node2 node3;do scp  kube-proxy.kubeconfig kube-proxy.yaml $i:&#x2F;etc&#x2F;kubernetes&#x2F;;done\nfor i in  msater2 master3 node1 node2 node3;do scp  kube-proxy.service $i:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;;done</code></pre>\n\n<h5 id=\"修改IP\"><a href=\"#修改IP\" class=\"headerlink\" title=\"修改IP\"></a>修改IP</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">vim &#x2F;etc&#x2F;kubernetes&#x2F;kube-proxy.yaml</code></pre>\n\n<h5 id=\"启动服务-4\"><a href=\"#启动服务-4\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir -p &#x2F;var&#x2F;lib&#x2F;kube-proxy\nsystemctl daemon-reload\nsystemctl enable --now kube-proxy\n\nsystemctl status kube-proxy</code></pre>\n\n<h3 id=\"（八）部署网络组件\"><a href=\"#（八）部署网络组件\" class=\"headerlink\" title=\"（八）部署网络组件\"></a>（八）部署网络组件</h3><h4 id=\"部署calico\"><a href=\"#部署calico\" class=\"headerlink\" title=\"部署calico\"></a>部署calico</h4><h5 id=\"创建calico-etcd文件\"><a href=\"#创建calico-etcd文件\" class=\"headerlink\" title=\"创建calico-etcd文件\"></a>创建calico-etcd文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat calico-etcd.yaml &gt;&gt;&gt; EOF\n---\n# Source: calico&#x2F;templates&#x2F;calico-etcd-secrets.yaml\n# The following contains k8s Secrets for use with a TLS enabled etcd cluster.\n# For information on populating Secrets, see http:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;user-guide&#x2F;secrets&#x2F;\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: calico-etcd-secrets\n  namespace: kube-system\ndata:\n  # Populate the following with etcd TLS configuration if desired, but leave blank if\n  # not using TLS for etcd.\n  # The keys below should be uncommented and the values populated with the base64\n  # encoded contents of each file that would be associated with the TLS data.\n  # Example command for encoding a file contents: cat &lt;file&gt; | base64 -w 0\n  # etcd-key: null\n  # etcd-cert: null\n  # etcd-ca: null\n---\n# Source: calico&#x2F;templates&#x2F;calico-config.yaml\n# This ConfigMap is used to configure a self-hosted Calico installation.\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: calico-config\n  namespace: kube-system\ndata:\n  # Configure this with the location of your etcd cluster.\n  etcd_endpoints: &quot;http:&#x2F;&#x2F;&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;&quot;\n  # If you&#39;re using TLS enabled etcd uncomment the following.\n  # You must also populate the Secret below with these files.\n  etcd_ca: &quot;&quot;   # &quot;&#x2F;calico-secrets&#x2F;etcd-ca&quot;\n  etcd_cert: &quot;&quot; # &quot;&#x2F;calico-secrets&#x2F;etcd-cert&quot;\n  etcd_key: &quot;&quot;  # &quot;&#x2F;calico-secrets&#x2F;etcd-key&quot;\n  # Typha is disabled.\n  typha_service_name: &quot;none&quot;\n  # Configure the backend to use.\n  calico_backend: &quot;bird&quot;\n  # Configure the MTU to use for workload interfaces and tunnels.\n  # - If Wireguard is enabled, set to your network MTU - 60\n  # - Otherwise, if VXLAN or BPF mode is enabled, set to your network MTU - 50\n  # - Otherwise, if IPIP is enabled, set to your network MTU - 20\n  # - Otherwise, if not using any encapsulation, set to your network MTU.\n  veth_mtu: &quot;1440&quot;\n\n  # The CNI network configuration to install on each node. The special\n  # values in this config will be automatically populated.\n  cni_network_config: |-\n    &#123;\n      &quot;name&quot;: &quot;k8s-pod-network&quot;,\n      &quot;cniVersion&quot;: &quot;0.3.1&quot;,\n      &quot;plugins&quot;: [\n        &#123;\n          &quot;type&quot;: &quot;calico&quot;,\n          &quot;log_level&quot;: &quot;info&quot;,\n          &quot;etcd_endpoints&quot;: &quot;__ETCD_ENDPOINTS__&quot;,\n          &quot;etcd_key_file&quot;: &quot;__ETCD_KEY_FILE__&quot;,\n          &quot;etcd_cert_file&quot;: &quot;__ETCD_CERT_FILE__&quot;,\n          &quot;etcd_ca_cert_file&quot;: &quot;__ETCD_CA_CERT_FILE__&quot;,\n          &quot;mtu&quot;: __CNI_MTU__,\n          &quot;ipam&quot;: &#123;\n              &quot;type&quot;: &quot;calico-ipam&quot;\n          &#125;,\n          &quot;policy&quot;: &#123;\n              &quot;type&quot;: &quot;k8s&quot;\n          &#125;,\n          &quot;kubernetes&quot;: &#123;\n              &quot;kubeconfig&quot;: &quot;__KUBECONFIG_FILEPATH__&quot;\n          &#125;\n        &#125;,\n        &#123;\n          &quot;type&quot;: &quot;portmap&quot;,\n          &quot;snat&quot;: true,\n          &quot;capabilities&quot;: &#123;&quot;portMappings&quot;: true&#125;\n        &#125;,\n        &#123;\n          &quot;type&quot;: &quot;bandwidth&quot;,\n          &quot;capabilities&quot;: &#123;&quot;bandwidth&quot;: true&#125;\n        &#125;\n      ]\n    &#125;\n---\n# Source: calico&#x2F;templates&#x2F;calico-kube-controllers-rbac.yaml\n\n# Include a clusterrole for the kube-controllers component,\n# and bind it to the calico-kube-controllers serviceaccount.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nmetadata:\n  name: calico-kube-controllers\nrules:\n  # Pods are monitored for changing labels.\n  # The node controller monitors Kubernetes nodes.\n  # Namespace and serviceaccount labels are used for policy.\n  - apiGroups: [&quot;&quot;]\n    resources:\n      - pods\n      - nodes\n      - namespaces\n      - serviceaccounts\n    verbs:\n      - watch\n      - list\n      - get\n  # Watch for changes to Kubernetes NetworkPolicies.\n  - apiGroups: [&quot;networking.k8s.io&quot;]\n    resources:\n      - networkpolicies\n    verbs:\n      - watch\n      - list\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nmetadata:\n  name: calico-kube-controllers\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-kube-controllers\nsubjects:\n- kind: ServiceAccount\n  name: calico-kube-controllers\n  namespace: kube-system\n---\n\n---\n# Source: calico&#x2F;templates&#x2F;calico-node-rbac.yaml\n# Include a clusterrole for the calico-node DaemonSet,\n# and bind it to the calico-node serviceaccount.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nmetadata:\n  name: calico-node\nrules:\n  # The CNI plugin needs to get pods, nodes, and namespaces.\n  - apiGroups: [&quot;&quot;]\n    resources:\n      - pods\n      - nodes\n      - namespaces\n    verbs:\n      - get\n  - apiGroups: [&quot;&quot;]\n    resources:\n      - endpoints\n      - services\n    verbs:\n      # Used to discover service IPs for advertisement.\n      - watch\n      - list\n  # Pod CIDR auto-detection on kubeadm needs access to config maps.\n  - apiGroups: [&quot;&quot;]\n    resources:\n      - configmaps\n    verbs:\n      - get\n  - apiGroups: [&quot;&quot;]\n    resources:\n      - nodes&#x2F;status\n    verbs:\n      # Needed for clearing NodeNetworkUnavailable flag.\n      - patch\n\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRoleBinding\nmetadata:\n  name: calico-node\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-node\nsubjects:\n- kind: ServiceAccount\n  name: calico-node\n  namespace: kube-system\n\n---\n# Source: calico&#x2F;templates&#x2F;calico-node.yaml\n# This manifest installs the calico-node container, as well\n# as the CNI plugins and network config on\n# each master and worker node in a Kubernetes cluster.\nkind: DaemonSet\napiVersion: apps&#x2F;v1\nmetadata:\n  name: calico-node\n  namespace: kube-system\n  labels:\n    k8s-app: calico-node\nspec:\n  selector:\n    matchLabels:\n      k8s-app: calico-node\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n  template:\n    metadata:\n      labels:\n        k8s-app: calico-node\n    spec:\n      nodeSelector:\n        kubernetes.io&#x2F;os: linux\n      hostNetwork: true\n      tolerations:\n        # Make sure calico-node gets scheduled on all nodes.\n        - effect: NoSchedule\n          operator: Exists\n        # Mark the pod as a critical add-on for rescheduling.\n        - key: CriticalAddonsOnly\n          operator: Exists\n        - effect: NoExecute\n          operator: Exists\n      serviceAccountName: calico-node\n      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a &quot;force\n      # deletion&quot;: https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;pod&#x2F;#termination-of-pods.\n      terminationGracePeriodSeconds: 0\n      priorityClassName: system-node-critical\n      initContainers:\n        # This container installs the CNI binaries\n        # and CNI network config file on each node.\n        - name: install-cni\n          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;cni:v3.15.3\n          command: [&quot;&#x2F;install-cni.sh&quot;]\n          env:\n            # Name of the CNI config file to create.\n            - name: CNI_CONF_NAME\n              value: &quot;10-calico.conflist&quot;\n            # The CNI network config to install on each node.\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: cni_network_config\n            # The location of the etcd cluster.\n            - name: ETCD_ENDPOINTS\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: etcd_endpoints\n            # CNI MTU Config variable\n            - name: CNI_MTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # Prevents the container from sleeping forever.\n            - name: SLEEP\n              value: &quot;false&quot;\n          volumeMounts:\n            - mountPath: &#x2F;host&#x2F;opt&#x2F;cni&#x2F;bin\n              name: cni-bin-dir\n            - mountPath: &#x2F;host&#x2F;etc&#x2F;cni&#x2F;net.d\n              name: cni-net-dir\n            - mountPath: &#x2F;calico-secrets\n              name: etcd-certs\n          securityContext:\n            privileged: true\n        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes\n        # to communicate with Felix over the Policy Sync API.\n        - name: flexvol-driver\n          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;pod2daemon-flexvol:v3.15.3\n          volumeMounts:\n          - name: flexvol-driver-host\n            mountPath: &#x2F;host&#x2F;driver\n          securityContext:\n            privileged: true\n      containers:\n        # Runs calico-node container on each Kubernetes node. This\n        # container programs network policy and routes on each\n        # host.\n        - name: calico-node\n          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;node:v3.15.3\n          env:\n            # The location of the etcd cluster.\n            - name: ETCD_ENDPOINTS\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: etcd_endpoints\n            # Location of the CA certificate for etcd.\n            - name: ETCD_CA_CERT_FILE\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: etcd_ca\n            # Location of the client key for etcd.\n            - name: ETCD_KEY_FILE\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: etcd_key\n            # Location of the client certificate for etcd.\n            - name: ETCD_CERT_FILE\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: etcd_cert\n            # Set noderef for node controller.\n            - name: CALICO_K8S_NODE_REF\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            # Choose the backend to use.\n            - name: CALICO_NETWORKING_BACKEND\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: calico_backend\n            # Cluster type to identify the deployment type\n            - name: CLUSTER_TYPE\n              value: &quot;k8s,bgp&quot;\n            # Auto-detect the BGP IP address.\n            - name: IP\n              value: &quot;autodetect&quot;\n            # Enable IPIP\n            - name: CALICO_IPV4POOL_IPIP\n              value: &quot;Always&quot;\n            # Enable or Disable VXLAN on the default IP pool.\n            - name: CALICO_IPV4POOL_VXLAN\n              value: &quot;Never&quot;\n            # Set MTU for tunnel device used if ipip is enabled\n            - name: FELIX_IPINIPMTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # Set MTU for the VXLAN tunnel device.\n            - name: FELIX_VXLANMTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # Set MTU for the Wireguard tunnel device.\n            - name: FELIX_WIREGUARDMTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # The default IPv4 pool to create on startup if none exists. Pod IPs will be\n            # chosen from this range. Changing this value after installation will have\n            # no effect. This should fall within &#96;--cluster-cidr&#96;.\n            # - name: CALICO_IPV4POOL_CIDR\n            #   value: &quot;192.168.0.0&#x2F;16&quot;\n            # Disable file logging so &#96;kubectl logs&#96; works.\n            - name: CALICO_DISABLE_FILE_LOGGING\n              value: &quot;true&quot;\n            # Set Felix endpoint to host default action to ACCEPT.\n            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION\n              value: &quot;ACCEPT&quot;\n            # Disable IPv6 on Kubernetes.\n            - name: FELIX_IPV6SUPPORT\n              value: &quot;false&quot;\n            # Set Felix logging to &quot;info&quot;\n            - name: FELIX_LOGSEVERITYSCREEN\n              value: &quot;info&quot;\n            - name: FELIX_HEALTHENABLED\n              value: &quot;true&quot;\n          securityContext:\n            privileged: true\n          resources:\n            requests:\n              cpu: 250m\n          livenessProbe:\n            exec:\n              command:\n              - &#x2F;bin&#x2F;calico-node\n              - -felix-live\n              - -bird-live\n            periodSeconds: 10\n            initialDelaySeconds: 10\n            failureThreshold: 6\n          readinessProbe:\n            exec:\n              command:\n              - &#x2F;bin&#x2F;calico-node\n              - -felix-ready\n              - -bird-ready\n            periodSeconds: 10\n          volumeMounts:\n            - mountPath: &#x2F;lib&#x2F;modules\n              name: lib-modules\n              readOnly: true\n            - mountPath: &#x2F;run&#x2F;xtables.lock\n              name: xtables-lock\n              readOnly: false\n            - mountPath: &#x2F;var&#x2F;run&#x2F;calico\n              name: var-run-calico\n              readOnly: false\n            - mountPath: &#x2F;var&#x2F;lib&#x2F;calico\n              name: var-lib-calico\n              readOnly: false\n            - mountPath: &#x2F;calico-secrets\n              name: etcd-certs\n            - name: policysync\n              mountPath: &#x2F;var&#x2F;run&#x2F;nodeagent\n      volumes:\n        # Used by calico-node.\n        - name: lib-modules\n          hostPath:\n            path: &#x2F;lib&#x2F;modules\n        - name: var-run-calico\n          hostPath:\n            path: &#x2F;var&#x2F;run&#x2F;calico\n        - name: var-lib-calico\n          hostPath:\n            path: &#x2F;var&#x2F;lib&#x2F;calico\n        - name: xtables-lock\n          hostPath:\n            path: &#x2F;run&#x2F;xtables.lock\n            type: FileOrCreate\n        # Used to install CNI.\n        - name: cni-bin-dir\n          hostPath:\n            path: &#x2F;opt&#x2F;cni&#x2F;bin\n        - name: cni-net-dir\n          hostPath:\n            path: &#x2F;etc&#x2F;cni&#x2F;net.d\n        # Mount in the etcd TLS secrets with mode 400.\n        # See https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;secret&#x2F;\n        - name: etcd-certs\n          secret:\n            secretName: calico-etcd-secrets\n            defaultMode: 0400\n        # Used to create per-pod Unix Domain Sockets\n        - name: policysync\n          hostPath:\n            type: DirectoryOrCreate\n            path: &#x2F;var&#x2F;run&#x2F;nodeagent\n        # Used to install Flex Volume Driver\n        - name: flexvol-driver-host\n          hostPath:\n            type: DirectoryOrCreate\n            path: &#x2F;usr&#x2F;libexec&#x2F;kubernetes&#x2F;kubelet-plugins&#x2F;volume&#x2F;exec&#x2F;nodeagent~uds\n---\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-node\n  namespace: kube-system\n\n---\n# Source: calico&#x2F;templates&#x2F;calico-kube-controllers.yaml\n# See https:&#x2F;&#x2F;github.com&#x2F;projectcalico&#x2F;kube-controllers\napiVersion: apps&#x2F;v1\nkind: Deployment\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system\n  labels:\n    k8s-app: calico-kube-controllers\nspec:\n  # The controllers can only have a single active instance.\n  replicas: 1\n  selector:\n    matchLabels:\n      k8s-app: calico-kube-controllers\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      name: calico-kube-controllers\n      namespace: kube-system\n      labels:\n        k8s-app: calico-kube-controllers\n    spec:\n      nodeSelector:\n        kubernetes.io&#x2F;os: linux\n      tolerations:\n        # Mark the pod as a critical add-on for rescheduling.\n        - key: CriticalAddonsOnly\n          operator: Exists\n        - key: node-role.kubernetes.io&#x2F;master\n          effect: NoSchedule\n      serviceAccountName: calico-kube-controllers\n      priorityClassName: system-cluster-critical\n      # The controllers must run in the host network namespace so that\n      # it isn&#39;t governed by policy that would prevent it from working.\n      hostNetwork: true\n      containers:\n        - name: calico-kube-controllers\n          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;kube-controllers:v3.15.3\n          env:\n            # The location of the etcd cluster.\n            - name: ETCD_ENDPOINTS\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: etcd_endpoints\n            # Location of the CA certificate for etcd.\n            - name: ETCD_CA_CERT_FILE\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: etcd_ca\n            # Location of the client key for etcd.\n            - name: ETCD_KEY_FILE\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: etcd_key\n            # Location of the client certificate for etcd.\n            - name: ETCD_CERT_FILE\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: etcd_cert\n            # Choose which controllers to run.\n            - name: ENABLED_CONTROLLERS\n              value: policy,namespace,serviceaccount,workloadendpoint,node\n          volumeMounts:\n            # Mount in the etcd TLS secrets.\n            - mountPath: &#x2F;calico-secrets\n              name: etcd-certs\n          readinessProbe:\n            exec:\n              command:\n              - &#x2F;usr&#x2F;bin&#x2F;check-status\n              - -r\n      volumes:\n        # Mount in the etcd TLS secrets with mode 400.\n        # See https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;secret&#x2F;\n        - name: etcd-certs\n          secret:\n            secretName: calico-etcd-secrets\n            defaultMode: 0400\n\n---\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system\n\n---\n# Source: calico&#x2F;templates&#x2F;calico-typha.yaml\n\n---\n# Source: calico&#x2F;templates&#x2F;configure-canal.yaml\n\n---\n# Source: calico&#x2F;templates&#x2F;kdd-crds.yaml\nEOF</code></pre>\n\n<h5 id=\"修改calico-etcd文件\"><a href=\"#修改calico-etcd文件\" class=\"headerlink\" title=\"修改calico-etcd文件\"></a>修改calico-etcd文件</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">sed -i &#39;s#etcd_endpoints: &quot;http:&#x2F;&#x2F;&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;&quot;#etcd_endpoints: &quot;https:&#x2F;&#x2F;192.168.2.18:2379,https:&#x2F;&#x2F;192.168.2.19:2379,https:&#x2F;&#x2F;192.168.2.20:2379&quot;#g&#39; calico-etcd.yaml\n\nETCD_CA&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;etcd-ca.pem | base64 | tr -d &#39;\\n&#39;&#96;\nETCD_CERT&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;etcd.pem | base64 | tr -d &#39;\\n&#39;&#96;\nETCD_KEY&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;etcd-key.pem | base64 | tr -d &#39;\\n&#39;&#96;\n\nsed -i &quot;s@# etcd-key: null@etcd-key: $&#123;ETCD_KEY&#125;@g; s@# etcd-cert: null@etcd-cert: $&#123;ETCD_CERT&#125;@g; s@# etcd-ca: null@etcd-ca: $&#123;ETCD_CA&#125;@g&quot; calico-etcd.yaml\n\n\nsed -i &#39;s#etcd_ca: &quot;&quot;#etcd_ca: &quot;&#x2F;calico-secrets&#x2F;etcd-ca&quot;#g; s#etcd_cert: &quot;&quot;#etcd_cert: &quot;&#x2F;calico-secrets&#x2F;etcd-cert&quot;#g; s#etcd_key: &quot;&quot; #etcd_key: &quot;&#x2F;calico-secrets&#x2F;etcd-key&quot; #g&#39; calico-etcd.yaml\n\n# 更改此处为自己的pod网段\nPOD_SUBNET&#x3D;&quot;172.16.0.0&#x2F;12&quot;\n\nsed -i &#39;s@# - name: CALICO_IPV4POOL_CIDR@- name: CALICO_IPV4POOL_CIDR@g; s@#   value: &quot;192.168.0.0&#x2F;16&quot;@  value: &#39;&quot;$&#123;POD_SUBNET&#125;&quot;&#39;@g&#39; calico-etcd.yaml\n\nkubectl apply -f calico-etcd.yaml\n\n# 查看容器状态\nkubectl  get po -n kube-system</code></pre>\n\n<h5 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl get pods -A\nkubectl get nodes</code></pre>\n\n<h4 id=\"部署coredns\"><a href=\"#部署coredns\" class=\"headerlink\" title=\"部署coredns\"></a>部署coredns</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">git clone https:&#x2F;&#x2F;github.com&#x2F;coredns&#x2F;deployment.git\ncd deployment&#x2F;kubernetes\n.&#x2F;deploy.sh -s -i 10.96.0.10 | kubectl apply -f -\n查看状态\n # kubectl get po -n kube-system -l k8s-app&#x3D;kube-dns</code></pre>\n\n<h3 id=\"（九）部署Metrics-Server\"><a href=\"#（九）部署Metrics-Server\" class=\"headerlink\" title=\"（九）部署Metrics  Server\"></a>（九）部署Metrics  Server</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat metrics-server.yml &gt;&gt;&gt; EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRole\nmetadata:\n  labels:\n    k8s-app: metrics-server\n    rbac.authorization.k8s.io&#x2F;aggregate-to-admin: &quot;true&quot;\n    rbac.authorization.k8s.io&#x2F;aggregate-to-edit: &quot;true&quot;\n    rbac.authorization.k8s.io&#x2F;aggregate-to-view: &quot;true&quot;\n  name: system:aggregated-metrics-reader\nrules:\n  - apiGroups:\n      - metrics.k8s.io\n    resources:\n      - pods\n      - nodes\n    verbs:\n      - get\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRole\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: system:metrics-server\nrules:\n  - apiGroups:\n      - &quot;&quot;\n    resources:\n      - pods\n      - nodes\n      - nodes&#x2F;stats\n      - namespaces\n      - configmaps\n    verbs:\n      - get\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: RoleBinding\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server-auth-reader\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n  - kind: ServiceAccount\n    name: metrics-server\n    namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server:system:auth-delegator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n  - kind: ServiceAccount\n    name: metrics-server\n    namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io&#x2F;v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: system:metrics-server\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n  - kind: ServiceAccount\n    name: metrics-server\n    namespace: kube-system\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server\n  namespace: kube-system\nspec:\n  ports:\n    - name: https\n      port: 443\n      protocol: TCP\n      targetPort: https\n  selector:\n    k8s-app: metrics-server\n---\napiVersion: apps&#x2F;v1\nkind: Deployment\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n  strategy:\n    rollingUpdate:\n      maxUnavailable: 0\n  template:\n    metadata:\n      labels:\n        k8s-app: metrics-server\n    spec:\n      containers:\n        - args:\n            - --cert-dir&#x3D;&#x2F;tmp\n            - --secure-port&#x3D;4443\n            - --metric-resolution&#x3D;30s\n            - --kubelet-insecure-tls\n            - --kubelet-preferred-address-types&#x3D;InternalIP,ExternalIP,Hostname\n            - --requestheader-client-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.pem # change to front-proxy-ca.crt for kubeadm\n            - --requestheader-username-headers&#x3D;X-Remote-User\n            - --requestheader-group-headers&#x3D;X-Remote-Group\n            - --requestheader-extra-headers-prefix&#x3D;X-Remote-Extra-\n          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;metrics-server:v0.4.1\n          imagePullPolicy: IfNotPresent\n          livenessProbe:\n            failureThreshold: 3\n            httpGet:\n              path: &#x2F;livez\n              port: https\n              scheme: HTTPS\n            periodSeconds: 10\n          name: metrics-server\n          ports:\n            - containerPort: 4443\n              name: https\n              protocol: TCP\n          readinessProbe:\n            failureThreshold: 3\n            httpGet:\n              path: &#x2F;readyz\n              port: https\n              scheme: HTTPS\n            periodSeconds: 10\n          securityContext:\n            readOnlyRootFilesystem: true\n            runAsNonRoot: true\n            runAsUser: 1000\n          volumeMounts:\n            - mountPath: &#x2F;tmp\n              name: tmp-dir\n            - name: ca-ssl\n              mountPath: &#x2F;etc&#x2F;kubernetes&#x2F;pki\n      nodeSelector:\n        kubernetes.io&#x2F;os: linux\n      priorityClassName: system-cluster-critical\n      serviceAccountName: metrics-server\n      volumes:\n        - emptyDir: &#123;&#125;\n          name: tmp-dir\n        - name: ca-ssl\n          hostPath:\n            path: &#x2F;etc&#x2F;kubernetes&#x2F;pki\n---\napiVersion: apiregistration.k8s.io&#x2F;v1\nkind: APIService\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: v1beta1.metrics.k8s.io\nspec:\n  group: metrics.k8s.io\n  groupPriorityMinimum: 100\n  insecureSkipTLSVerify: true\n  service:\n    name: metrics-server\n    namespace: kube-system\n  version: v1beta1\n  versionPriority: 100\nEOF</code></pre>\n\n<p><strong>创建metrics-server.yml</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl  create -f metrics-server.yml</code></pre>\n\n<p><strong>查看节点状态</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl  top nodes</code></pre>\n","feature":true,"text":"（一）环境准备集群节点介绍 IP地址 机器角色 集群组件 192.168.2.188 VIP HAProxy keepalived centos7.5 192.168.2.18 Master1 kube-apiserver kube-controller-manage kube-...","link":"","photos":[],"count_time":{"symbolsCount":"72k","symbolsTime":"1:06"},"categories":[],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/tags/Kubernetes.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">（一）环境准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">集群节点介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">软件版本</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E5%88%86%E9%85%8D\"><span class=\"toc-text\">网络分配**\t**</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E5%87%86%E5%A4%87\"><span class=\"toc-text\">（二）基础准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%85%8D%E5%AF%86\"><span class=\"toc-text\">配置免密</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D\"><span class=\"toc-text\">修改主机名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEhosts\"><span class=\"toc-text\">配置hosts</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%97%ADfirewalld%EF%BC%8Cdnsmasq%EF%BC%8Cselinux%EF%BC%8CNetworkManager\"><span class=\"toc-text\">关闭firewalld，dnsmasq，selinux，NetworkManager</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%97%ADswap\"><span class=\"toc-text\">关闭swap</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">安装必要软件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">时间同步</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">系统配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BDipvs\"><span class=\"toc-text\">加载ipvs</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#k8s%E5%86%85%E6%A0%B8%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">k8s内核优化</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88%E4%B8%89%EF%BC%89%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE-%EF%BC%88%E4%BD%BF%E7%94%A8haproxy%E5%92%8Ckeepalived%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">（三）高可用配置  （使用haproxy和keepalived部署高可用）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85keepalived%E5%92%8Chaproxy\"><span class=\"toc-text\">安装keepalived和haproxy</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEhaproxy\"><span class=\"toc-text\">配置haproxy</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEkeepalived\"><span class=\"toc-text\">配置keepalived</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">健康检查脚本</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">启动服务</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88%E5%9B%9B%EF%BC%89%E6%90%AD%E5%BB%BAetcd%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">（四）搭建etcd集群</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">配置工作目录</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90cfss%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">生成cfss证书</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85cfssl%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">安装cfssl工具</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEca%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置ca请求文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAca%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">创建ca证书</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEca%E8%AF%81%E4%B9%A6%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">配置ca证书策略</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEetcd%E8%AF%B7%E6%B1%82csr%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置etcd请求csr文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">生成证书</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BDetcd\"><span class=\"toc-text\">下载etcd</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">创建配置文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">创建启动文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#master%E8%8A%82%E7%82%B9%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">master节点创建目录</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E5%90%84%E4%B8%AAmaster%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">同步各个master节点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#master2%E5%92%8Cmaster3%E4%BF%AE%E6%94%B9IP\"><span class=\"toc-text\">master2和master3修改IP</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8etcd%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">启动etcd集群</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E9%9B%86%E7%BE%A4%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">查看集群状态</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88%E4%BA%94%EF%BC%89kuberenets%E7%BB%84%E4%BB%B6%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">（五）kuberenets组件配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Docker\"><span class=\"toc-text\">安装Docker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85\"><span class=\"toc-text\">下载安装包</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%8E%8B%E5%AE%89%E8%A3%85%E5%8C%85\"><span class=\"toc-text\">解压安装包</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">复制文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEdocker%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置docker启动文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8docker\"><span class=\"toc-text\">启动docker</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85-1\"><span class=\"toc-text\">下载安装包</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">所有节点创建工作目录</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2api-server\"><span class=\"toc-text\">部署api-server</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E5%92%8Ctoken%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">生成证书和token文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-1\"><span class=\"toc-text\">创建配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAapiserver%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">创建apiserver文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%88%B0%E8%8A%82%E7%82%B9%E4%B8%8A\"><span class=\"toc-text\">同步文件到节点上</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9master2%E5%92%8Cmaster3%E7%9A%84IP\"><span class=\"toc-text\">修改master2和master3的IP</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1-1\"><span class=\"toc-text\">启动服务</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2kube-controller-manager\"><span class=\"toc-text\">部署kube-controller-manager</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAcsr%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">创建csr请求文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6-1\"><span class=\"toc-text\">生成证书</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAkubeconfig%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">创建kubeconfig配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAconf%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">创建conf配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6-1\"><span class=\"toc-text\">创建启动文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6%E5%88%B0%E5%90%84%E4%B8%AA%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">同步相关文件到各个节点</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1-2\"><span class=\"toc-text\">启动服务</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2kube-scheduler\"><span class=\"toc-text\">部署kube-scheduler</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAcsr%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6-1\"><span class=\"toc-text\">创建csr请求文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6-2\"><span class=\"toc-text\">生成证书</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAkubeconfig\"><span class=\"toc-text\">创建kubeconfig</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-2\"><span class=\"toc-text\">创建配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6-2\"><span class=\"toc-text\">创建启动文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">同步文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1-3\"><span class=\"toc-text\">启动服务</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2kubectl\"><span class=\"toc-text\">部署kubectl</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAcsr%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6-2\"><span class=\"toc-text\">创建csr请求文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6-3\"><span class=\"toc-text\">生成证书</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#kubeconfig%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">kubeconfig配置</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E9%9B%86%E7%BE%A4%E7%8A%B6%E6%80%81-1\"><span class=\"toc-text\">查看集群状态</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%88%B0%E5%85%B6%E4%BB%96%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">同步文件到其他节点</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEkubectl%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8\"><span class=\"toc-text\">配置kubectl命令补全</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88%E5%85%AD%EF%BC%89TLS-Bootstrapping-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">（六）TLS  Bootstrapping 配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9C%A8master1%E5%88%9B%E5%BB%BAbootstrap\"><span class=\"toc-text\">在master1创建bootstrap</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAyaml\"><span class=\"toc-text\">创建yaml</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8bootstrap\"><span class=\"toc-text\">启动bootstrap</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88%E4%B8%83%EF%BC%89node%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">（七）node节点部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2kubelet\"><span class=\"toc-text\">部署kubelet</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9C%A8master1%E8%8A%82%E7%82%B9%E4%B8%8A%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">在master1节点上执行</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-3\"><span class=\"toc-text\">创建配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6-3\"><span class=\"toc-text\">创建启动文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6-1\"><span class=\"toc-text\">同步文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">所有节点执行</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%8A%82%E7%82%B9%E5%8A%A0%E5%85%A5%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">节点加入集群</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2kube-proxy\"><span class=\"toc-text\">部署kube-proxy</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAcsr%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6-3\"><span class=\"toc-text\">创建csr请求文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6-4\"><span class=\"toc-text\">生成证书</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAconfig%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">创建config文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-4\"><span class=\"toc-text\">创建配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6-4\"><span class=\"toc-text\">创建启动文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6-2\"><span class=\"toc-text\">同步文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9IP\"><span class=\"toc-text\">修改IP</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1-4\"><span class=\"toc-text\">启动服务</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88%E5%85%AB%EF%BC%89%E9%83%A8%E7%BD%B2%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">（八）部署网络组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2calico\"><span class=\"toc-text\">部署calico</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAcalico-etcd%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">创建calico-etcd文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9calico-etcd%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">修改calico-etcd文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">查看状态</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2coredns\"><span class=\"toc-text\">部署coredns</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88%E4%B9%9D%EF%BC%89%E9%83%A8%E7%BD%B2Metrics-Server\"><span class=\"toc-text\">（九）部署Metrics  Server</span></a></li></ol>","author":{"name":"xiaomaomi","slug":"blog-author","avatar":"https://www.991229.cn/i/2023/04/13/64376d0c494e1.png","link":"/","description":"学习devops的每一天","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"kubernetes的架构设计","uid":"64e1a25088b85c68e2e16be94c5eff1a","slug":"kubernetes的架构设计","date":"2023-04-14T14:32:15.000Z","updated":"2023-04-14T06:32:15.000Z","comments":true,"path":"api/articles/kubernetes的架构设计.json","keywords":null,"cover":null,"text":"Master节点：Master节点是K8s集群的控制节点，在生产环境中不建议部署集群核心组件以外的任何容器，公司业务的容器更是不要部署到master节点上，以免升级或者维护时对业务造成影响： kube-apiserver：整个集群的控制中枢 提供集群中各个模块之间的数据交换，并将...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":2,"path":"api/tags/Kubernetes.json"}],"author":{"name":"xiaomaomi","slug":"blog-author","avatar":"https://www.991229.cn/i/2023/04/13/64376d0c494e1.png","link":"/","description":"学习devops的每一天","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Redis","uid":"a978a5e93d8e6628e9f4ee713be55be8","slug":"Redis","date":"2023-04-12T09:42:37.000Z","updated":"2023-04-17T11:48:15.000Z","comments":true,"path":"api/articles/Redis.json","keywords":null,"cover":null,"text":"什么是RedisRedis是一个基于内存支持key-value等多种数据结构的存储系统，支持网络 可用于缓存，事件发布或订阅，高速队列等场景，支持字符串（String），哈希（Hashes），列表（Lists），队列（Sets），有序集合（Zset）等数据类型 基于内存 可持久化...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"}],"author":{"name":"xiaomaomi","slug":"blog-author","avatar":"https://www.991229.cn/i/2023/04/13/64376d0c494e1.png","link":"/","description":"学习devops的每一天","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}